%!PS-Adobe-2.0 EPSF-1.2
%%Title: tmpPSFile
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%CreationDate: Sun Jun 11 23:35:36 2017
%%For:ballbot ballbot
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 0 3 253 302%%HiResBoundingBox: 0.716414 3.012680 252.863219 301.794389%%EndComments

%%BeginProlog
%%BeginPreview: 253 300 8 2100
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000112200000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000004488aaddffffeebb8855000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000033ccffcc997744447799ccffcc3300000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000077eecc33000000000000000022bbff88000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000011bbff8800000000000000000000000077eecc1100000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000088ee33000000000000000000000000000022eeaa00000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000044ff770000000000000000000000000000000055ff55000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000011ddaa00000000000000000000000000000000000099ee110000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000088ee1100000000000000000000000000000000000011dd990000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb88000000000000000000000000000000000000000088cc0000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000ff66000000448822448844000000000000000000000044ff0000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000033ff3300000000cc4400bb88001188220088330000000011ff4400
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000066ff0000000000bb4400bb88000055990055000000000000dd7700
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000088cc0000000000bb4400bb88003311992255000000000000bb8800
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000055ff0000000000888855ddbb22440022aa44000000000000ee6600
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000022ff50000000000000000000228811009900000000000022ff3300
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000110000f3c9000000000000000000000000000000000000000066ff0000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000011000044aa0000aa99000000000000000000000000000000000000000088bb0000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000011000044aa00000000000066ff4400000000000000000000000000000000000033ff880000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000011
% 000044aa0000000000000000000000bbdd110000000000000000000000000000000000cccc000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000011000044aa
% 00000000000000000000000000000022ee880000000000000000000000000000000088ff33000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000011000033bb00000000
% 0000000000000000000000000000000066ff77000000000000000000000000000066ff8800000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000011000022bb0000000000000000
% 000000000000000000000000000000000088ffbb220000000000000000000011aaff880000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000011000022bb000000000000000000000000
% 00000000000000000000000000000000000033ccee77220000000000001166eedd44000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000011000022bb00000000000000000000000000000000
% 000000000000000000000000000000000000000088ffffeebb88b8bbddffff881100000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000011000022bb0000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000447799ccffc2774400000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000011000022cc000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044ff22000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 22444411000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000011000022cc00000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000088dd00000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000002288bbee
% ffffffffddaa77110000000000000000000000000000000000000000000000000000000000000000
% 00000022000022cc0000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000bb9900000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000077eedd9977
% 4400114488aaeedd4400000000000000000000000000000000000000000000000000000000000022
% 000022cc000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff6600000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000022bbff88000000
% 00000000000011aaff881100000000000000000000000000000000000000000000000022000022cc
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000044ff1100000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000033eecc3300000000
% 000000000000000055eecc110000000000000000000000000000000000000022000022bb00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000088cc0000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000ccbb000000000000
% 00000000000000000022ee8800000000000000000000000000000022000022bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000bb880000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088ee22000000000000
% 0000000000000000000055ff440000000000000000000022000022bb000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000ff550000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000033ff7700000000000000
% 0000000000000000000000aadd11000000000011000022cc00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000055ff110000000000000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000114488aaccbb88552200
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000aabb0000000000000000
% 000000000000000000000011ee770011000022cc0000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000088cc000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000033ccffffcc998899ccffffdd
% 44000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000ff660000000000000000
% 00000000000000000000000099bb22cc000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000cc88000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000088ffbb440000000000000044bb
% ff880000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000033ff330000000044882244
% 88440000000000000000000077ee0000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000011ff55000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000033ccff880000000000000000000000
% 77eecc33000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000066ff000000000000cc4400
% bb880000000000000000000044ff2200000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000055ff11000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000cccc33000000000000000000000000
% 0022ccdd110000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000088bb000000000000bb4400
% bb880011447711000000000000ff5500000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000088cc00000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000088ee2200000000000000000000000000
% 000011ee880000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000099bb000000000000bb4400
% bb880077114488000000000000ff6600000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000cc8800000000000000000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000033ff770000000000000000000000000000
% 00000055ff4400000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000077dd000000000000888855
% ddbb2200007744000000000033ff3300000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000011ff5500000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000ccbb000000000000000000000000000000
% 00000000aaee11000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044ff110000000000000000
% 00000000554411000000000066ff0000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000055ff1100000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000033ff22000000000000000000000000000000
% 0000000011ff44000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000ff550000000000000000
% 00000055aa8866000000000088bb0000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000088bb0000000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000066ee00000000000044882244884400000000
% 0000000000dd88000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000cc880000000000000000
% 000000000000000000000000cc880000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000cc880000000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000088bb00000000000000cc4400bb8800000000
% 0000000000aaaa000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000077ff3300000000000000
% 000000000000000000000077ff330000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000011ff440000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000bb8800000000000000bb4400bb8800115533
% 000000000077dd000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000bbcc00000000000000
% 0000000000000000000022ee88000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000055ff000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000ff5500000000000000bb4400bb8800004444
% 000000000044ff000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000022ee88000000000000
% 00000000000000000000bbcc00000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000099bb000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000dd8800000000000000888855ddbb22004444
% 000000000066ff000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000077ff880000000000
% 000000000000000011aaff3300000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000dd88000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000aaaa00000000000000000000000000004444
% 000000000088bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000077eecc33000000
% 0000000000000082efdd440000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000022ff44000000000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000088dd00000000000000000000000000117788
% 1100000000bb88000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000033ccff884400
% 000000002255aaffc211000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000066ff00000000000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000044ff11000000000000000000000000000000
% 0000000000ff55000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000088ddffff
% cc99aaddffffccd28800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000099bb00000000000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000011ee88000000000000000000000000000000
% 0000000077ff22000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000001144
% 88aa997744000088bb00000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000dd8800000000000000000000000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000077ff330000000000000000000000000000
% 00000022ee8800000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000066ff00000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000022ff4400000000000000000000000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000bbcc0000000000000000000000000000
% 000000bbcc0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000033ff33000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000066ff0000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000022ee9900000000000000000000000000
% 000088ff330000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000ff55000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000099bb0000000000000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000066ffbb220000000000000000000000
% 22bbffc2000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb88000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000dd770000000000000000000000000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000000033ccee7700000000000000000066
% eedd8fff220000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000088bb000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000022ff330000000000000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000088ffeeaa8844224488aaddff
% 881100ee880000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000066ee000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000066ee000000000000000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000227799ccffffffddaa7733
% 00000088ee0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000044ff220000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000099aa000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000441100000000
% 00000022ff6600000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000ff550000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000ee77000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000099bb00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000cc880000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000033ff33000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000044ff33000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000099bb0000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000088b4d622000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000cc99000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000077ee0000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000088ffffdd000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000066ff110000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000044ff1100000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000088ffff44000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000ee880000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000ff4400000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000066ff8800000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000088dd0000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000cc8800000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000009be21100000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000022ff6600000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000099aa00000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000c9ff9d22000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000aabb00000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000088dd00000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bbdeeeff9d2200000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000044ff33000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000044ff11000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bbc685b6eeff9d220000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000dd99000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000011ff44000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bbc6858585b6eeff9d22000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000066ff110000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000dd88000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bbce8585858585b6eeff9d2200000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000011ee880000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000aaaa000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bbde85858585858585b6eeff9d220000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000088dd0000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088dd000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bbde858585858585858585b6eeff9d22000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000022ff5500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bbde8585858585858585858585a6dcffbd4400000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000aabb00000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000011ff440000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bbde8585b6c6a695c6b68585858585a6dcffc0440000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000044ff22000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000dd770000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bbde858585cec69db68585858585858585a6deffc044000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000dd99000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000bb990000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bbde85858585e7c68585858dc69585c69d8585a6deffc04400
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000066ee110000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088cc0000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bbde85858595c6efa6858585aece85ae8585858585a6e7ffbd
% 33000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000011ee770000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000055ff0000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bbde8585b6de95bef7b6859d8dce95ae8585858595ceffe266
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088dd0000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000022ff4400000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bbde858585858585858585a68595d6a6858595ceffe2660000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000022ff5500000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000ee7700000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bbde858585858585858595c68d85ce8595ceffe26600000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000bbbb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000bb9900000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bbde85858585858585858585858595ceffe266000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000055ff22000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000088bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000088de8585858585858585858595ceffe2660000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000dd99000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000055ff00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000011444444444498de858585858585858595ceffe26600000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000077ee110000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000022ff33000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000eeffffffcc98de85858585858595ceffe2d6880000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000011ee770000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000ee66000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000099ffff991188de858585858dceffe26600bbaa0000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000099dd0000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb88000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000004477000033ff88000088de85858dc6f5e26600000088bb0000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000022ff4400000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000088bb000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000044000022330000005500000088de8dc6f5e266000000000088bb0000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000bbaa00000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000066ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00002299000000000000000000000088f7f5e2660000000000000088bb0000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000055ff22000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000033ff330000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000022cc
% 00000000000000000000000000000088f08811000000000000000088bb0000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000dd88000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000ff660000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000007700000022
% 00000000000000000000000000000033110000000000000000000077ff0000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000077ee110000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bb880000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000110000117700000000
% 00000000000000000000000000000000000000000000000000000044ff0000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000011ee660000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000088bb0000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000cc1100000000000000
% 00000000000000000000000000000000000000000000000000000044ff0000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000099dd0000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000066ee0000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000099220000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff0000000000000000000000
% 00000000000000000000000000
% 00000000000000004400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000033ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000033ff2200000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000004411000044000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff2200000000000000000000
% 00000000000000000000000000
% 0000000000000000e19d000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000bbaa00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000ff5500000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000008822000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000011ff4400000000000000000000
% 00000000000000000000000000
% 0000000000000033ffff9d0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000066ff22000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000cc8800000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000aa4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000ff4400000000000000000000
% 00000000000000000000000000
% 0000000000000088e5b6ff9d00000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000dd88000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000022b0c7bb000000000000000000000000000000000000000000
% 00000000000000000000000000000066330000110000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000ff4400000000000000000000
% 00000000000000000000000000
% 00000000000000e3be85b6ff9d000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000088ee000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000088ffffcc000000000000000000000000000000000000000000
% 00000000000000000000001111000055220000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000ff4400000000000000000000
% 00000000000000000000000000
% 00000000000033ff958585b6ff9d0000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000011ff660000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000002288551100000000000011eeffaa000000000000000000000000000000000000000000
% 00000000000000000000006677000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000ff7700000000000000000000
% 00000000000000000000000000
% 00000000000088ee85858585b6ff9d00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000099cc0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000ffffffd188440000000066ff88000000000000000000000000000000000000000000
% 00000000000000667700000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000bb8800000000000000000000
% 00000000000000000000000000
% 000000000000e3c68585858585b6ff9d000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000033ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000c2ceaec6eeffffb0773300cc66000000000000000000000000000000000000000000
% 00000022440000112200000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000bb8800000000000000000000
% 00000000000000000000000000
% 000000000033ff9d858585858585b6ff9d0000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000bb9900000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000088de85858595b6cef6ffe3b78f220000000000000000000000000000000000000000
% 00000044770000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000bb8800000000000000000000
% 00000000000000000000000000
% 000000000088ee8585858585858585aef59d00000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000066ff5d440000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000066ff858585858585859dbed6ffffd388551100000000000000000000000000000044
% 99000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000bb8800000000000000000000
% 00000000000000000000000000
% 0000000000e3c68585858585858585859df59d000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000001166ebff880000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000033ff9d85858585858585858585a6c6e7ffffc28833000000000088bbbbc0e4880000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000099bb00000000000000000000
% 00000000000000000000000000
% 0000000033ff9d85859dd6b685858585859df59d0000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000099ffff880000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000ffb6858585858585858585858585858daeceecfff2b077220066ffffffbb000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000088bb00000000000000000000
% 00000000000000000000000000
% 0000000088ee85858585bec6a6deae8585859df59d00000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000ccffbb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000c2c685858585858585a6ae858585858585858595b6d6f5ffe290ffff7700000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000088bb00000000000000000000
% 00000000000000000000000000
% 00000000e3c68585858595f7be8585858585859df59d000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000011ccbb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000088de858585a6c6be8dde8d8daebec685858585858585b6ffad1188440000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000088bb00000000000000000000
% 00000000000000000000000000
% 00000033ff9d8585a6b6c6d6b685859db6ae85859df59d0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000011880000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000055ff858585859df7d695859dae85c685858585858dceff88000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000088dd00000000000000000000
% 00000000000000000000000000
% 00000088ec85858595be8db6de8585ce85a6a685859df59d00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000449922000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000022ff9d8585858595efce85858595ae8585858595e5f25500000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000055ff00000000000000000000
% 00000000000000000000000000
% 000000e1c685858585858595beae95c685be9d8585859df59d000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044ffff9d2200000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000f2b685858585c68dd6e7ae85ae95a68585aef5d1220000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000044ff00000000000000000000
% 00000000000000000000000000
% 000033ff9d8585858585858585859da685d685858585859df59d0000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044ffb6eeff9d220000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000077ffeebbbb88c6ce858585aece85958d85a6c6c68d85c6ff9d11000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000044ff00000000000000000000
% 00000000000000000000000000
% 000077ec8585858585858585858585aeae9d8585858585859df5ad21110000000000000000000000
% 0000000000000000000000000000000000000000000000000044ff8585b6eeff9d22000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 4488c9ffffffbb2288e78585858585858585858585858ddeff660000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000044ff00000000000000000000
% 00000000000000000000000000
% 0000d1c6858585858585858585858585858585858585a6aec6deffe5ffcc88551100000000000000
% 0000000000000000000000000000000000000000000000000044ff85858585b6eeff9d2200000000
% 0000000000000000000000000000000000000000000000000000000000000000000000004488bbff
% ffdd99f0ee77000055ff85858585858585858585859deef033000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000033ff44000000000000000000
% 00000000000000000000000000
% 0022ff9d85858585858585858585859da6c6c6deebffffffd3c088806c88ccffffcc885511000000
% 0000000000000000000000000000000000000000000000000044ff858585858585b6eeff9d220000
% 00000000000000000000000000000000000000000000000000000000000000115588ccffffcc8855
% 110000882200000022ffa6858585858585858585b6f8e41100000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ff44000000000000000000
% 00000000000000000000000000
% 0077ec858585858595a6bec6deecffffffe2c0887744220000000000000000004488bbffffdd9966
% 2200000000000000000000000000000000000000000000000044ff8585858585858585b6eeff9d22
% 000000000000000000000000000000000000000000000000000000115588ccffffcc885511000000
% 000000000000000000f1be8585858585858585ceffe5f10000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ff44000000000000000000
% 00000000000000000000000000
% 00d1d6bec6dee5ffffffe2c28898763300000000000000000000000000000000000000004488bbff
% ffdd996622000000000000000000000000000000000000000044ff85858585858585858585b6eeff
% 9d22000000000000000000000000000000000000000000115588ccffffcc88551100000000000000
% 000000000000000000c0ce85858585858595e5f255c6ff0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ff44000000000000000000
% 00000000000000000000000000
% 22fffff1c4998855330000000066ee00000000000000000000000000000000000000000000000000
% 4488bbffffdd9966220000000000000000000000000000000044ff858585858585858585858585b6
% eeff9d22000000000000000000000000000000115588ccffffbb8855110000000000000000000000
% 00000000000000000088e58585858585a6f6d13300c9ff3300000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ff55000000000000000000
% 00000000000000000000000000
% 1144000000000000000000000033ff33000000000000000000000000000000000000000000000000
% 000000004488bbeeffdd99663300000000000000000000000044ff858585b6c6a695c6b685858585
% 85b6dcff9d44000000000000000000226699ddffffbb884400000000000000000000000000000000
% 00000000000000000055ff85858585beff9d110000eeff5500000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000dd88000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000ff66000000000000000000000000000000000000000000000000
% 00000000000000003377aaeeffeeaa7733000000003300000044ff85858585cec69db685858dae9d
% 858585a6dcffbd44000000226699ddffffbb88440000000000000000000000000000000000000000
% 00000000000000000022ffa6858dd6ff7700000000ffcd8800000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000bb88000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000bb88000000000000000000000000000000000000000000000000
% 0000000000000000000000003377aaeeffeeaa7769ff88000044ff8585858585e7c685858585a6a6
% 8585858585a6deffc050ddffffbb8844000000000000000000000000000000000000000000000000
% 00000000000000000000f1be9de5f1440000000044ffa7bb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000bb88000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000088cc000000000000000000000000000000000000000000000000
% 000000000000000000000000000000003377aaeed7ffffcc3344ff8585858595c6efa6858585a6a6
% 85858585858585c6ffffc74400000000000000000000000000000000000000000000000000000000
% 00000000000000000000c0e7f5d011000000000044ff88dd00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000bb88000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000055ff000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000c0ffffffff8fff858585b6de95bef7b68585a6a6
% 8585858585a6deffc044000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000088ff8c0000000000000088dd44ff00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000bbaa000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000022ff440000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000664444000044ff858585858585858585858dbec6
% 8d8585a6deffc0440000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000003366000000000000000088bb22ff44000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000088bb000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000dd770000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044ff85858585858585858585858585
% 85a6deffc04400000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bb9900ff66000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000088bb000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000aa990000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044ff858585858585858585858585a6
% deffc044000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bb8800bb88000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000088bb000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000088dd0000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044ff85858585858585858585a6deff
% c0440000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff550088bb000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000088bb000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000044ff1100000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044ff8585858585858585a6deffc044
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000011ff440077ee000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000077ff000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000011ff4400000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044ff858585858585a6deffc0440000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000044ff110044ff110000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044ff000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000cc8800000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044ff85858585a6deffc04400000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000055ff000011ff440000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044ff000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000099bb00000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044ff8585a6deffc044000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000088cc000000ee770000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044ff000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000077ee00000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044ffa6deffc0440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000088bb000000bb880000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044ff220000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000033ff22000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000076ffffc04400000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb8800000088bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000011ff440000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000ff66000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000076ff44000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000cc8800000066ee0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000ff440000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000bb88000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000005dff44000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff4400000044ff1100000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000ff440000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000088bb000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044ff99000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000022ff4400000000ff4400000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000ff440000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000066ff000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044ffff110000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000044ff0000000000dd8800000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000ff770000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000022ff330000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000088ffee660000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000066ff0000000000bb9900000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000bb880000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000ee770000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000088bb99cc0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000088bb000000000088bb00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000bb880000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000bb990000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000088bb44ff3300000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000099bb000000000066ff00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000bb880000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000088cc0000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000088bb00dd8800000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000bb88000000000033ff22000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000bb880000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000044ff1100000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000088bb0077ee00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000dd77000000000000ff44000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000099bb0000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000011ff4400000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000088bb0022ff66000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000ff44000000000000cc88000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000088bb0000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000dd8800000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000099bb0000aaaa000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000033ff33000000000000aaaa000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000088bb0000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000aaaa00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000bb99000055ff220000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ff0000000000000088cc000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000088bb0000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000077dd00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000bb88000000ee880000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000077ee0000000000000055ff000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000088dd0000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000044ff22000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000bb8800000088dd0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000088bb0000000000000033ff330000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000055ff0000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000ff55000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000bb8800000022ff4400000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000aaaa0000000000000000ff550000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000044ff0000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000cc88000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000bb8800000000cc9900000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000bb880000000000000000cc880000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000044ff0000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000088bb000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000bb880000000066ff11000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000ee66000000000000000099aa0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000044ff0000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000066ff000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff880000000011ee66000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000ff44000000000000000088dd0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000033ff4400000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000033ff330000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff44000000000099cc000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044ff22000000000000000044ff0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000ff4400000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000ee660000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff44000000000044ff330000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044ff00000000000000000022ff4400000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000ff4400000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000bb880000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff44000000000000dd880000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000088dd00000000000000000000ff6600000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000ff4400000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000088cc0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff4400000000000077ee0000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000088bb00000000000000000000bb8800000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000ff5500000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000055ff0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff4400000000000022ff6600000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000bb990000000000000000000099bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000dd8800000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000022ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000011ff4400000000000000aaaa00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000bb880000000000000000000077dd00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000bb8800000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000dd7700000000000000000000000000000000
% 00000000000000000000000000000000000000000000000044ff330000000000000055ff22000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000ff550000000000000000000044ff11000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000bb8800000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000aaaa00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000044ff000000000000000000ee88000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000011ff440000000000000000000011ff44000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000bb8800000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000088dd00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000044ff00000000000000000088dd000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000044ff110000000000000000000000ee77000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000bbaa00000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000044ff11000000000000000000000000000000
% 00000000000000000000000000000000000000000000000044ff00000000000000000022ff440000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000055ff000000000000000000000000bb88000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088bb00000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000ff44000000000000000000000000000000
% 00000000000000000000000000000000000000000000000044ff00000000000000000000cc990000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000088cc00000000000000000000000088bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088bb00000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000cc88000000000000000000000000000000
% 00000000000000000000000000000000000000000000000044ff0000000000000000000066ff1100
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000088bb00000000000000000000000077ee000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088bb00000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000099bb000000000000000000000000000000
% 00000000000000000000000000000000000000000000000077ff0000000000000000000011ee6600
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bb8800000000000000000000000044ff110000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088bb00000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000077ee000000000000000000000000000000
% 00000000000000000000000000000000000000000000000088cc000000000000000000000099cc00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000dd8800000000000000000000000000ff440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000077ff00000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000033ff220000000000000000000000000000
% 00000000000000000000000000000000000000000000000088bb000000000000000000000044ff33
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000ff4400000000000000000000000000dd770000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff00000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000ff660000000000000000000000000000
% 00000000000000000000000000000000000000000000000088bb000000000000000000000000dd88
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000022ff4400000000000000000000000000bb990000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff00000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000bb880000000000000000000000000000
% 00000000000000000000000000000000000000000000000088bb00000000000000000000000077ee
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000044ff000000000000000000000000000088bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff00000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000088bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000088bb00000000000000000000000022ff
% 66000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000066ff000000000000000000000000000066ff0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff22000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000055ff0000000000000000000000000000
% 00000000000000000000000000000000000000000000000088bb00000000000000000000000000aa
% aa000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000088bb000000000000000000000000000044ff2200000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000011ff44000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000022ff4400000000000000000000000000
% 000000000000000000000000000000000000000000000000bbaa0000000000000000000000000055
% ff220000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000099bb000000000000000000000000000000ff4400000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000ff44000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000ee7700000000000000000000000000
% 000000000000000000000000000000000000000000000000bb880000000000000000000000000000
% ee880000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb88000000000000000000000000000000cc8800000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000ff44000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000bb9900000000000000000000000000
% 000000000000000000000000000000000000000000000000bb880000000000000000000000000000
% 88dd0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000ee77000000000000000000000000000000aa9900000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000ff44000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000088cc00000000000000000000000000
% 000000000000000000000000000000000000000000000000bb880000000000000000000000000000
% 22ff4400000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000ff4400000000000000000000000000000088cc00000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000022bbcdcf990000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000044ff11000000000000000000000000
% 000000000000000000000000000000000000000000000000bb880000000000000000000000000000
% 00cc9900000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000033ff3300000000000000000000000000000055ff00000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000bbffff550000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000011ff44000000000000000000000000
% 000000000000000000000000000000000000000000000000bb880000000000000000000000000000
% 0066ff11000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000044ff0000000000000000000000000000000033ff33000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000066ffff000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000000dd88000000000000000000000000
% 000000000000000000000000000000000000000000000000ee880000000000000000000000000000
% 0011ee66000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000077ee0000000000000000000000000000000000ff55000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000eeaa000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000000099aa000000000000000000000000
% 000000000000000000000000000000000000000000000000ff660000000000000000000000000000
% 000099cc000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000088bb0000000000000000000000000000000000cc88000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000098a4663300000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000000077ee000000000000000000000000
% 000000000000000000000000000000000000000000000000ff440000000000000000000000000000
% 000044ff330000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000aaaa0000000000000000000000000000000000aaaa000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000001188b2f2ffffffffffc68c33
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000000044ff220000000000000000000000
% 000000000000000000000000000000000000000000000000ff440000000000000000000000000000
% 000000dd880000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000bb88000000000000000000000000000000000088cc000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044e4f5cbbaa07d7d97b1c2e5ff
% 8c000000000000000000000000
% 000000000000000000000000000000000000000000000000000000ff550000000000000000000000
% 000000000000000000000000000000000000000000000000ff440000000000000000000000000000
% 00000077ee0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000ff66000000000000000000000000000000000044ff000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000001190ffd4867d7d7d7d7d7d7d7d7dba
% ffd43300000000000000000000
% 000000000000000000000000000000000000000000000000000000cc880000000000000000000000
% 000000000000000000000000000000000000000000000000ff440000000000000000000000000000
% 00000022ff6600000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000ff44000000000000000000000000000000000022ff440000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000011d1f6a87d7d7d7d7d7d7d7d7d7d7d7d
% 97e5ff44000000000000000000
% 00000000000000000000000000000000000000000000000000000088bb0000000000000000000000
% 000000000000000000000000000000000000000000000000ff440000000000000000000000000000
% 00000000aaaa00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000044ff22000000000000000000000000000000000000ff660000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000090f6867d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddce4110000000000000000
% 00000000000000000000000000000000000000000000000000000066ff0000000000000000000000
% 000000000000000000000000000000000000000000000044ff440000000000000000000000000000
% 0000000055ff22000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000044ff00000000000000000000000000000000000000bb880000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ffa87d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d86f6900000000000000000
% 00000000000000000000000000000000000000000000000000000033ff3300000000000000000000
% 000000000000000000000000000000000000000000000044ff000000000000000000000000000000
% 0000000000ee88000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088dd0000000000000000000000000000000000000099bb0000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000011e4d47d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7da8ff4400000000000000
% 00000000000000000000000000000000000000000000000000000000ee6600000000000000000000
% 000000000000000000000000000000000000000000000044ff000000000000000000000000000000
% 000000000088dd000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088bb0000000000000000000000000000000000000088dd0000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000077f5867d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7dd4c200000000000000
% 00000000000000000000000000000000000000000000000000000000bb9900000000000000000000
% 000000000000000000000000000000000000000000000044ff000000000000000000000000000000
% 000000000022ff440000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000bb880000000000000000000000000000000000000044ff0000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000b2cb7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7da8ff00000000000000
% 0000000000000000000000000000000000000000000000000000000088cc00000000000000000000
% 000000000000000000000000000000000000000000000044ff000000000000000000000000000000
% 000000000000cc990000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000cc880000000000000000000000000000000000000011ff6922000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000e6ba7d7d7da0c2c2c2a07d7d7d7d7d7d7d7d
% 7d7d7d7d8eff33000000000000
% 0000000000000000000000000000000000000000000000000000000055ff00000000000000000000
% 000000000000000000000000000000000000000000000044ff000000000000000000000000000000
% 00000000000066ff1100000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000ff5500000000000000000000000000000000000022ccffff88000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000011ffa07d7d7dc297a0f6977d86c2977d7dbab1
% 7d7d7d7d7df666000000000000
% 0000000000000000000000000000000000000000000000000000000011ff44000000000000000000
% 000000000000000000000000000000000000000000000066ff000000000000000000000000000000
% 00000000000011ee6600000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000011ff4400000000000000000000000000000000000000aaffff44000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044ff7d7d7d7d8e86f6a87d7d7dc2a87d97cb7d
% 7d7d7d7d7ddc88000000000000
% 0000000000000000000000000000000000000000000000000000000000dd77000000000000000000
% 000000000000000000000000000000000000000000000088dd000000000000000000000000000000
% 0000000000000099cc00000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044ff110000000000000000000000000000000000000022ffff22000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000066ff7d7d7d7d7ddcc27dc27d978ec28697c27d
% 7d7d7d7d7dd4ad000000000000
% 0000000000000000000000000000000000000000000000000000000000aaaa000000000000000000
% 000000000000000000000000000000000000000000000088bb000000000000000000000000000000
% 0000000000000044ff33000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000055ff00000000000000000000000000000000000000000088ff00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000022ff977d7d7dc2ffc2d4c27da87dcb8e86c27d
% 7d7d7d7d7dee77000000000000
% 000000000000000000000000000000000000000000000000000000000088dd000000000000000000
% 000000000000000000000000000000000000000000000088bb000000000000000000000000000000
% 0000000000000000dd88000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088cc00000000000000000000000000000000000000000011aa00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000f2b17d7d7d7d7d7d7d7d8ec286c28ec2ba7d
% 7d7d7d7d86ff44000000000000
% 000000000000000000000000000000000000000000000000000000000044ff110000000000000000
% 000000000000000000000000000000000000000000000088bb000000000000000000000000000000
% 000000000000000077e4883300000000000000000000000000000000000000000000000000000000
% 000000000000000000000088bb00000000000000000000000000000000000000000000314488b5c4
% 90663300000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000c6c27d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7da0ff00000000000000
% 000000000000000000000000000000000000000000000000000000000000ff550000000000000000
% 000000000000000000000000000000000000000000000088bb000000000000000000000000000000
% 0000000000000033cfffff4400000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb88000000000000000000000000000000000000000044e1ffffeed4c2
% dcf6ffff9c1100000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000557788ee7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7dc2d400000000000000
% 000000000000000000000000000000000000000000000000000000000033c9bb8800000000000000
% 000000000000000000000000000000000000000000000088bb000000000000000000000000000000
% 0000000000000000aaffff4400000000000000000000000000000000000000000000000000000000
% 0000000000000000000000dd880000000000000000000000000000000000001194ffd4a0867d7d7d
% 7d7d8ea8edf25a000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044880000223333ffc27d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d97ff7700000000000000
% 0000000000000000000000000000000000000000000000000000000000bbffff9900000000000000
% 0000000000000000000000000000000000000000000000bbbb000000000000000000000000000000
% 000000000000000011ccff4400000000000000000000000000000000000000000000000000000000
% 0000000000000000000000ff44000000000000000000000000000000000044e4f6a87d7d7d7d7d7d
% 7d7d7d7d86cbffad1100000000000000000000000000000000000000000000000000000000000000
% 00000000000000000011000033bb0000112200000000008cff977d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7de5c40000000000000000
% 000000000000000000000000000000000000000000000000000000000033ffff8800000000000000
% 0000000000000000000000000000000000000000000000bb88000000000000000000000000000000
% 00000000000000000011ee4400000033666633000000000000000000000000000000000000000000
% 0000000000000000000022ff440000000000000000000000000000000022f1d4867d7d7d7d7d7d7d
% 7d7d7d7d7d7da8f6ad00000000000000000000000000000000000000000000000000000000000000
% 000000000022000022dd0000001100000000000000000000c6e57d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7dc2f3220000000000000000
% 00000000000000000000000000000000000000000000000000000000000088ff5500440000000000
% 0000000000000000000000000000000000000000000000bb88000000000000000000000000000000
% 0000000000000000000033778cc8fffff5ffffffc688220000000000000000000000000000000000
% 0000000000000000000044ff0000000000000000000000000000000000c4ee867d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7da0ff5a000000000000000000000000000000000000000000000000000000000000
% 0044000000cc11000000000000000000000000000000000022f1dc8e7d7d7d7d7d7d7d7d7d7d7d7d
% 7dc2ff77000000000000000000
% 00000000000000000000000000000000000000000000000000000000002280f3e3ffffffd9a67733
% 0000000000000000000000000000000000000000000000bb88000000000000000000000000000000
% 000000000000000000008cffeec2a88e7d7d97b1c2edf25a00000000000000000000000000000000
% 0000000000000000000066ff0000000000000000000000000000000077ffa07d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7dc2f2110000000000000000000000000000000000000000000000000000551100
% 00aa110000000000000000000000000000000000000000000044e4f6ba7d7d7d7d7d7d7d7d7d7d97
% e5f37700000000000000000000
% 000000000000000000000000000000000000000000000000000000008cfff5e8c6a897a0c2d4f6ff
% 8c00000000000000000000000000000000000000000000bb88000000000000000000000000000000
% 000000000000000033d4ffc27d7d7d7d7d7d7d7d7d86c2ffb2110000000000000000000000000000
% 0000000000000000000088bb00000000000000000000000000000022f2c27d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d86edb00000000000000000000000000000000000000000000077330000882200
% 00000000000000000000000000000000000000000000000000001190ffd4b1977d7d7d7d86a0c2ff
% c4220000000000000000000000
% 000000000000000000000000000000000000000000000000000033d6ffba7d7d7d7d7d7d7d7d7dba
% f6d6330000000000000000000000000000000000000000bb88000000000000000000000000000000
% 0000000000000033f1e5977d7d7d7d7d7d7d7d7d7d7d7da0edf11100000000000000000000000000
% 0000000000000000000099aa00000000000000000000000000000077f57d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7da8ff0000000000000000000000000000000000006655000055220000000000
% 0000000000000000000000000000000000000000000000000000000044c2ffffffdcdceeffffd477
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000066ffe5977d7d7d7d7d7d7d7d7d7d7d
% 8edcff6600000000000000000000000000000000000000cc88000000000000000000000000000000
% 00000000000000d4dc7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d86edb200000000000000000000000000
% 00000000000000000000bb88000000000000000000000000000000a3dc7d7d7d7d7d7da0c2c2c2a0
% 7d7d7d7d7d7d7d7d7d8eff4400000000000000000000000000668800002222000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000336688997744ff1100
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000022f2cb7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7dc2ff33000000000000000000000000000000000000ff77000000000000000000000000000000
% 00000000000090f68e7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff6b000000000000000000000000
% 00000000000000000000ee77000000000000000000000000000000d9c27d7d7d7d7d7dc297a0f697
% 97c2ba867d7d7d7d7d7df67700000000000022000055990000112200000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000055ff8800
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000c6e5867d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7ddcd6000000000000000000000000000000000000ff44000000000000000000000000000000
% 000000000033ffba7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7dc2f2220000000000000000000000
% 00000000000000000000ff44000000000000000000000000000000ffa87d7d7d7d7d7d8e86f6a87d
% a097867d7d7d7d7d7d7ddca6000033000022bb000000110000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000088ffdd00
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000077ff977d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d8ef68c0000000000000000000000000000000000ff44000000000000000000000000000000
% 0000000000c0dc7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d86ed880000000000000000000000
% 00000000000000000033ff33000000000000000000000000000044ff8e7d7d7d7d7d7d7ddcc27dc2
% 9797b1977d7d7d7d7d7dc2c40011bb00000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000ddffff66
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000011f1c27d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7dbaff2200000000000000000000000000000000ff44000000000000000000000000000000
% 0000000000f2ba7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7dc2c60000000000000000000000
% 000000000000000066a7df55110000000000000000000000000022ffa07d7d7d7d7d7dc2ffc2d4c2
% a0868ec27d7d7d7d7d7dcbc400000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000022bbdba855
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000044ff867d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7dff5500000000000000000000000000000000ff44000000000000000000000000000000
% 0000000022ffa07d7d7d7d7da0c2c2c2a07d7d7d7d7d7d7d7d7d7db1ff0000000000000000000000
% 000000000000000066ffffee110000000000000000000000000000f2ba7d7d7d7d7d7d7d7d7d7d7d
% a08eb1977d7d7d7d7d7de58c00000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000bb8800
% 00000000000000000000000000
% 000000000000000000000000000000000000000000008cee7d7d7d7d7d7da0c2c2c2a07d7d7d7d7d
% 7d7d7d7d7ddc9400000000000000000000000000000000ff44000000000000000000000000000000
% 0000000055ff7d7d7d7d7d7dc297a0f69786a0ba867d7d7d7d7d7d97ff3300000000000000000000
% 000000000000000022ffff88000000000000000000000000000000c8cb7d7d7d7d7d7d7d7d7d7d7d
% 7d867d7d7d7d7d7d7d7dff5500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000bb8800
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000b5d47d7d7d7d7d7dc297a0f69786a8977d7d
% 7d7d7d7d7dc2c600000000000000000000000000000033ff44000000000000000000000000000000
% 0000000088e57d7d7d7d7d7d8e86f6a87da88ea8b17d7d7d7d7d7d7dff6600000000000000000000
% 000000000000000000eeee110000000000000000000000000000008ce57d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7da0ff2200000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000bb8800
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000e3c27d7d7d7d7d7d8e86f6a87d7da0a07d7d
% 7d7d7d7d7db1f200000000000000000000000000000044ff11000000000000000000000000000000
% 0000000088dc7d7d7d7d7d7d7ddcc27dc27d8ecb867d7d7d7d7d7d7df57700000000000000000000
% 000000000000000011c1cbb5e3f1c494552200000000000000000055ffa07d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7dcbf00000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000aaaa00
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000ffa87d7d7d7d7d7d7ddcc27dc27da0a07d7d
% 7d7d7d7d7da0ff000000000000000000000000000055c0dbbb440000000000000000000000000000
% 0000000066ff7d7d7d7d7d7dc2ffc2d4c28e86a0c27d7d7d7d7d7d8eff4400000000000000000000
% 000000000000118cffffefd4c2bacbe5ffffb0110000000000000000c2ee867d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7da8ff550000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000088bb00
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000c4c27d7d7d7d7d7dc2ffc2d4c27da0a07d7d
% 7d7d7d7d7dbae6000000000000000000000000000022ffffee000000000000000000000000000000
% 0000000033ff977d7d7d7d7d7d7d7d7d7db197baa87d7d7d7d7d7da8ff0000000000000000000000
% 000000000033e6f6ba867d7d7d7d7d7d7da8eef25a0000000000000022f2c27d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d86f6b2000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000088bb00
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000097dc7d7d7d7d7d7d7d7d7d7d7d86bac2867d
% 7d7d7d7d7dcbb5000000000000000000000000000000ccff88000000000000000000000000000000
% 0000000000ffb17d7d7d7d7d7d7d7d7d7d7d86867d7d7d7d7d7d7dc2d60000000000000000000000
% 000000008cffdc8e7d7d7d7d7d7d7d7d7d7d86c2ffad1100000000000055ffa87d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7dd4f111000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000088bb00
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000066f67d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7dee8c00000000000000000000000000000088ff22000000000000000000000000000000
% 0000000000c2cb7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7de59c0000000000000000000000
% 00000055ffba7d7d7d7d7d7d7d7d7d7d7d7d7d7da0f58c000000000000009cffc2867d7d7d7d7d7d
% 7d7d7d7d7d97e5f14400000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000088ee00
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000033ff8e7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d86ff4400000000000000000000000000003385e3c4ffe3b58c4400000000000000000000
% 000000000055ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7dbaff330000000000000000000000
% 000011f2c27d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7dbaff440000000000000077f2eea07d7d7d7d7d
% 7d7d7d7dc2ffc6220000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044ff00
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000e1dc7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7dd4f11100000000000000000000000033d3ffffe5c2b1c2d4eefff2770000000000000000
% 000000000000b5ee867d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d8ef68c000000000000000000000000
% 0000b5ee867d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7dd4e4110000000000000022c2ffdcc2b19786
% a0c2e2eef27b00000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044ff00
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000044ffba7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7da8ff550000000000000000000000008cffe5a07d7d7d7d7d7d7d86c2ffc622000000000000
% 00000000000011f2cb7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddcd600000000000000000000000000
% 0066ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d86f68c000000000000000000558cc8f2ffff
% ffe6dccf220000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044ff00
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000090f68e7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d86f6a3000000000000000000000011c2ffc27d7d7d7d7d7d7d7d7d7d7d97e5f2660000000000
% 0000000000000055ffc2867d7d7d7d7d7d7d7d7d7d7d7d8edcff3300000000000000000000000000
% 00b0d47d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7dc2e4000000000000000000000000002244
% 1100bbff660000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044ff22
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000d3e58e7d7d7d7d7d7d7d7d7d7d7d7d
% 7d8ee5e4110000000000000000000000c2ed977d7d7d7d7d7d7d7d7d7d7d7d7d7dc2ff3300000000
% 000000000000000055f2eea07d7d7d7d7d7d7d7d7d7db1f6e4440000000000000000000000000000
% 00e5c27d7d7d7d7da0c2c2c2a07d7d7d7d7d7d7d7d7d7da0ff110000000000000000000000000000
% 0000bbffff3300000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff44
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000033d1f6ba7d7d7d7d7d7d7d7d7d7d7d
% baf6e33300000000000000000000007bff977d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddcd611000000
% 00000000000000000011b5ffcbb6967d7d7d7d97b1d4ff9011000000000000000000000000000000
% 11ffa07d7d7d7d7dc297a0f6977d7dba7d7d7d7d7d7d7d86ff440000000000000000000000000000
% 0000bbffffbb00000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff44
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000090ffdca07d7d7d7d7d7d7da0d4
% ff9411000000000000000000000022f2c27d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d8ef68c000000
% 000000000000000000000055c2fffff6dcdcffffffc2440000000000000000000000000000000000
% 44ff867d7d7d7d7d8e86f6a87d7d8ecb7d7d7d7d7d7d7d7dee880000000000000000000000000000
% 000088b0e40000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff44
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000033d3ffffe5cbc2cbe5ffffe1
% 4400000000000000000000000000c0e57d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7dbaff330000
% 00000000000000000000000011eea066888866330000000000000000000000000000000000000000
% 88f57d7d7d7d7d7d7ddcc27dc28697c27d7d7d7d7d7d7d7ddc990000000000000000000000000000
% 00000022ff3300000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff66
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000225590cce7c494552200
% 0000000000000000000000000000ffa87d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7de3880000
% 00000000000000000000000088ffbb00000000000000000000000000000000000000000000000000
% 44ff7d7d7d7d7d7dc2ffc2d4c2a8a0d4977d7d7d7d7d7d7de5880000000000000000000000000000
% 00000000dd8800000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000cc88
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000099880000000000
% 0000000000000000000000000044ff8e7d7d7d7d7da0c2c2c2a07d7d7d7d7d7d7d7d7d7dcbb80000
% 000000000000000000000011eeffff00000000000000000000000000000000000000000000000000
% 11ffa07d7d7d7d7d7d7d7d7d7d7d8ee5977d7d7d7d7d7d7dff440000000000000000000000000000
% 0000000088dd00000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bb88
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000022ffbb0000000000
% 0000000000000000000000000077f67d7d7d7d7d7dc297a0f69786a0ba867d7d7d7d7d7dbae60000
% 000000000000000000000055ffffff44000000000000000000000000000000000000000000000000
% 00e6ba7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff110000000000000000000000000000
% 0000000033ff33000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bb88
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000099ffff0000000000
% 00000000000000000000000000a3dc7d7d7d7d7d7d8e86f6a87dba86a0c27d7d7d7d7d7da0ff1100
% 00000000000000000000000044ff4411000000000000000000000000000000000000000000000000
% 00b2d47d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7dc2e4000000000000000000000000000000
% 0000000000dd88000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bb88
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000022ffffff4400000000
% 00000000000000000000000000c4c27d7d7d7d7d7d7ddcc27dc27d7dbaa07d7d7d7d7d7d7dff4400
% 00000000000000000000000077ee0000000000000000000000000000000000000000000000000000
% 0077ff977d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d86ed9c000000000000000000000000000000
% 000000000088dd000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000088bb
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000001198cfb55500000000
% 00000000000000000000000000b5d47d7d7d7d7d7dc2ffc2d4c27da8a0867d7d7d7d7d7da0ff2200
% 00000000000000000000000088bb0000000000000000000000000000000000000000000000000000
% 0000d3e57d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7dc2f211000000000000000000000000000000
% 000000000033ff220000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000088bb
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000044ff000000000000
% 0000000000000000000000000088ee7d7d7d7d7d7d7d7d7d7d7da8d4c2b17d7d7d7d7d7dbaf20000
% 00000000000000000000000099bb0000000000000000000000000000000000000000000000000000
% 000033ffc27d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff5a00000000000000000000000000000000
% 000000000000dd770000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000088bb
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000055ff000000000000
% 0000000000000000000000000044ff867d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7dcbc60000
% 000000000000000000000000bb880000000000000000000000000000000000000000000000000000
% 0000008cffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d97edb00000000000000000000000000000000000
% 00000000000099cc0000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000088cc
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088cc000000000000
% 0000000000000000000000000000ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7de58c0000
% 000000000000000000000000cc880000000000000000000000000000000000000000000000000000
% 000000009cffc2867d7d7d7d7d7d7d7d7d7d7dbaf5d1110000000000000000000000000000000000
% 00000000000055ff2200000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000066ff
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088bb000000000000
% 0000000000000000000000000000c0dc7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da8ff440000
% 000000000000000000000000ff550000000000000000000000000000000000000000000000000000
% 000000000055f2eea07d7d7d7d7d7d7d7d8edcff8c00000000000000000000000000000000000000
% 00000000000000ee7700000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000044ff
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000bb99000000000000
% 000000000000000000000000000033ffba7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d86f6b0000000
% 000000000000000000000000ff440000000000000000000000000000000000000000000000000000
% 00000000000011b0fff6dcc2a8b3c2d4eeffd3330000000000000000000000000000000000000000
% 0000000000000099cc00000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000044ff
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000bb88000000000000
% 00000000000000000000000000000090f68e7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7dd4f211000000
% 000000000000000000000044ff220000000000000000000000000000000000000000000000000000
% 00000000000000003377a6e8ffffe6b58c4400000000000000000000000000000000000000000000
% 0000000000000055ff22000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000044ff
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000ee77000000000000
% 00000000000000000000000000000000d1e5867d7d7d7d7d7d7d7d7d7d7d7d7d7dbaff4400000000
% 000000000000000000000044ff000000000000000000000000000000000000000000000000000000
% 00000000000000000044ddffdd110000000000000000000000000000000000000000000000000000
% 0000000000000000ee66000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000022ff
% 44000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000ff44000000000000
% 0000000000000000000000000000000033e3f6a87d7d7d7d7d7d7d7d7d7d7d86d4ff8c0000000000
% 000000000000000000000077ee000000000000000000000000000000000000000000000000000000
% 000000000000000044ffffff77000000000000000000000000000000000000000000000000000000
% 000000000000000099aa000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000ff
% 44000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000011ff44000000000000
% 00000000000000000000000000000000001194ffd4867d7d7d7d7d7d7d7da8f6e644000000000000
% 000000000000000000000088bb000000000000000000000000000000000000000000000000000000
% 000000000000000011cdf1ff11000000000000000000000000000000000000000000000000000000
% 000000000000000066ff110000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000ff
% 44000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff00000000000000
% 0000000000000000000000000000000000000044e3ffe5cbbaa0a8c2dcffff8c1100000000000000
% 000000000000000000000099bb000000000000000000000000000000000000000000000000000000
% 0000000000000000bbee5c8800000000000000000000000000000000000000000000000000000000
% 000000000000000011ff660000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000ff
% 44000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff00000000000000
% 000000000000000000000000000000000000000011448cb5e6ffffc8bf6633000000000000000000
% 0000000000000000000000bb88000000000000000000000000000000000000000000000000000000
% 0000000000000099ee33000000000000000000000000000000000000000000000000000000000000
% 000000000000000000aaaa0000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000ee
% 88000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088dd00000000000000
% 00000000000000000000000000000000000000000000000000000000bb9900000000000000000000
% 0000000000000000000000cc88000000000000000000000000000000000000000000000000000000
% 00000000000099ff5500000000000000000000000000000000000000000000000000000000000000
% 00000000000000000066ff1100000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000bb
% 88000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088bb00000000000000
% 0000000000000000000000000000000000000000000000000000000088ff99000000000000000000
% 0000000000000000000000ff55000000000000000000000000000000000000000000000000000000
% 000000000066ff660000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000011ff6600000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000bb
% 88000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000aaaa00000000000000
% 0000000000000000000000000000000000000000000000000000000088ffff660000000000000000
% 0000000000000000000000ff44000000000000000000000000000000000000000000000000000000
% 0000000066ff77000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000aa9900000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000bb
% 88000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000bb8800000000000000
% 0000000000000000000000000000000000000000000000000000000088ffffbb1100000000000000
% 0000000000000000000044ff22000000000000000000000000000000000000000000000000000000
% 00000033ff9900000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000066ee00000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000aa
% bb000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000dd8800000000000000
% 0000000000000000000000000000000000000000000000000000000088a0f1550000000000000000
% 0000000000000000000044ff00000000000000000000000000000000000000000000000000000000
% 000033ee990000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000022ff55000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000088
% bb000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000ff4400000000000000
% 000000000000000000000000000000000000000000000000000000000000bbbb0000000000000000
% 0000000000000000000066ee00000000000000000000000000000000000000000000000000000000
% 0022eecc000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000cc99000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000088
% bb000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000011ff4400000000000000
% 00000000000000000000000000000000000000000000000000000000000044ff2200000000000000
% 0000000000000000000088bb00000000000000000000000000000000000000000000000000000000
% 11cccc11000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000077ee000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000088
% bb000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000044ff1100000000000000
% 00000000000000000000000000000000000000000000000000000000000000dd9900000000000000
% 0000000000000000000088bb00000000000000000000000000000000000000000000000000000011
% ccdd1100000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000022ff550000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000088
% ee000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000044ff0000000000000000
% 0000000000000000000000000000000000000000000000000000000000000066ee11000000000000
% 00000000000000000000bb88000000000000000000000000000000000000000000000000000000aa
% ee330000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000cc990000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000044
% ff000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000088dd0000000000000000
% 0000000000000000000000000000000000000000000000000000000000000011ee77000000000000
% 00000000000000000000bb88000000000000000000000000000000000000000000000000000099ee
% 33000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000077dd0000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000044
% ff000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000088bb0000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088dd000000000000
% 00000000000000000000ff660000000000000000000000000000000000000000000000000088ff55
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000022ff3300000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000044
% ff000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000aaaa0000000000000000
% 000000000000000000000000000000000000000000000000000000000000000022ff550000000000
% 00000000000000000000ff4400000000000000000000000000000000000000000000000066ff6600
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000dd8800000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000044
% ff330000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000bb880000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000aabb0000000000
% 00000000000000000033ff33000000000000000000000000000000000000000000000066ff880000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000088dd00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% d6330000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000dd880000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000044ff2200000000
% 00000000000000000044ff000000000000000000000000000000000000000000000033ee99000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000033ff33000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000099
% ff990000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000ff440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000dd9900000000
% 00000000000000000066ff0000000000000000000000000000000000000000000033ee9900000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000dd88000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000099ee
% 8cff9900000000000000000000
% 000000000000000000000000000000000000000000000000000000000011ff440000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000066ff11000000
% 00000000000000000088bb00000000000000000000000000000000000000000011eecc1100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000088dd000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000099ee39
% 086bff99000000000000000000
% 000000000000000000000000000000000000000000000000000000000044ff110000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000011ee88000000
% 00000000000000000088bb000000000000000000000000000000000000000011cccc110000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000033ff220000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000099ee3908
% 08086bff990000000000000000
% 000000000000000000000000000000000000000000000000000000000044ff000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000088dd000000
% 000000000000000000bb880000000000000000000000000000000000000011ccee11000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000dd770000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000099ee390808
% 0808086bff9900000000000000
% 000000000000000000000000000000000000000000000000000000000088dd000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000022ff660000
% 000000000000000000bb880000000000000000000000000000000000000099ee3300000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000099cc0000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000099ee39080808
% 080808086bff99000000000000
% 000000000000000000000000000000000000000000000000000000000088bb000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000aabb0000
% 000000000000000000ff6600000000000000000000000000000000000099ee330000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000055ff2200000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000099ee3908080808
% 08080808086bff990000000000
% 0000000000000000000000000000000000000000000000000000000000aaaa000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000044ff3300
% 000000000000000000ff44000000000000000000000000000000000088ff66000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000ee7700000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000099ee390808080808
% 0808080808086bff9900000000
% 0000000000000000000000000000000000000000000000000000000000bb88000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cc9900
% 000000000000000033ff330000000000000000000000000000000066ff6600000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000099cc00000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000099ee39084aad4a0808
% 080808080808086bff99000000
% 0000000000000000000000000000000000000000000000000000000000dd88000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000066ff11
% 000000000000000044ff0000000000000000000000000000000066ff880000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000055ff22000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000099ee39080808bd4a0808
% 08080808080808086bff990000
% 0000000000000000000000000000000000000000000000000000000000ff44000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ee88
% 000000000000000066ff00000000000000000000000000000033ee99000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000ee66000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000099ee3908080808bd4a0808
% 0808080808080808086bff9900
% 0000000000000000000000000000000000000000000000000000000011ff44000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000088dd
% 000000000000000088bb000000000000000000000000000033eeaa00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000099aa000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000c2ef390808080808bd4a0818
% 9c39087b5a08080808086bff99
% 0000000000000000000000000000000000000000000000000000000044ff11000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000022ff
% 660000000000000088bb0000000000000000000000000011ddcc1100000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000b4ad000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000022000000c9ef390808080808bd4a0808
% ad084a180808080808086bff99
% 0000000000000000000000000000000000000000000000000000000044ff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000099
% bb00000000000000bb8800000000000000000000000011cccc110000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000099ffee990000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000994400000099ee3908080808bd4a0839
% 9c8c4a0808080808086bff9900
% 0000000000000000000000000000000000000000000000000000000088dd00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000044
% ff33000000000000bb88000000000000000000000000ccee22000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000099ff6b39ee9900000000000000000000000000000000000000
% 00000000000000000000000000000000000000009955000000000000000099ee3908084ade9c087b
% 5a18ad08080808086bff990000
% 0000000000000000000000000000000000000000000000000000000088bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% cc99000000000000ff66000000000000000000000099ee3300000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000099ff6b080839ee99000000000000000000000000000000000000
% 0000000000000000000000000000000055440000111100000000000000000099ee390808080829bd
% 2908ad5a0808086bff99000000
% 00000000000000000000000000000000000000000000000000000000aaaa00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 66ff220000000000ff440000000000000000000099ff330000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000099ff6b0808080839ee990000000000000000000000000000000000
% 000000000000000000000000221100004422000000000000000000000000000099ee390808080808
% 0808080808086bff9900000000
% 00000000000000000000000000000000000000000000000000000000bb8800000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00ee880000000033ff3300000000000000000077ff66000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000099ff6b08080808080839ee9900000000000000000000000000000000
% 00000000000000000000000077550000000000000000000000000000000000000099ee3908080808
% 08080808086bff990000000000
% 00000000000000000000000000000000000000000000000000000000dd8800000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0088ee0000000069ff00000000000000000066ff6600000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000099ff6b080808080808080839ee99000000000000000000000000000000
% 0000000000000000778800000000000000000000000000000000000000000000000099ee39080808
% 080808086bff99000000000000
% 00000000000000000000000000000000000000000000000000000000ff4400000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0022ff66000033eeff990000000000000055ff880000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000099ff6b0808080808080808080839ee990000000000000000000000000000
% 000000004477000000110000000000000000000000000000000000000000000000000099ee390808
% 0808086bff9900000000000000
% 00000000000000000000000000000000000000000000000000000011ff4400000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000099cc0033ee9c6bff99000000000033ee99000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000099ff6b08084aad4a0808080808080839ee9900000000000000000000000000
% 11440000224400000000000000000000000000000000000000000000000000000000000099ee3908
% 08086bff990000000000000000
% 000000000000000000000000000000000000000000000000000000a7f74100000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044ff69ee9c08086bff9900000033eeaa00000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000099ff6b08080808bd4a080808080808080839ee99000000000000000000000000
% 3377000000000000000000000000000000000000000000000000000000000000000000000099ee39
% 086bff99000000000000000000
% 000000000000000000000000000000000000000000000000000099ffbdee33000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000c9f79c080808086bff990011ddcc1100000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000099ff6b0808080808bd4a08080808080808080839ee990000000000000055990000
% 000000000000000000000000000000000000000000000000000000000000000000000000000099ee
% 8cff9900000000000000000000
% 0000000000000000000000000000000000000000000000000099ff6b089cee330000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000033ee9c0808080808086bffa0cccc110000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000099ff6b080808080808bd4a0808080808080808080839ee9900002288000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000099
% ff990000000000000000000000
% 00000000000000000000000000000000000000000000000099ff6b0808089cee3300000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0033ee9c08080808080808086bffd633000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000066ff9c08080808080808bd4a184a7b18080808080808088cff66001144000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 55000000000000000000000000
% 000000000000000000000000000000000000000000000099ff6b08080808089cee33000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 33ee9c080808080808080808086bff99000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000099ff6b080808080808bd4a5a295a6b0808080808086bffcf00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000099ff6b080808080808089cee330000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000033
% ee9c0808080808080808080808086bff990000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000099ff6b080808084ade9c08299c1808080808086bff990000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000099ff6b0808080808080808089cee3300000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000033ee
% 9c080808084aad4a080808080808086bff9900000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000099ff6b08080808080829184a8c080808086bff99000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000099ff6b08080808080808080808089cee33000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000033ee9c
% 080808080808bd4a08080808080808086bff99000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000099ff6b08080808086b397b5a0808086bff9900000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000099ff6b080808084aad4a0808080808089cee330000
% 00000000000000000000000000000000000000000000000000000000000000000000000033ee9c08
% 080808080808bd4a0808080808080808086bff990000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000099ff6b080808080818180808086bff990000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000099ff6b080808080808bd4a080808080808089cee3300
% 000000000000000000000000000000000000000000000000000000000000000000000022eebd0808
% 080808080808bd4a184a7b180808080808087bff8800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000099ff6b08080808080808086bff99000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000099ff6b08080808080808bd4a08080808080808089cee33
% 00000000000000000000000000000000000000000000000000000000000000000000000099ff6b08
% 080808080808bd4a7b184a8c080808080818cdee3300000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000099ff6b0808080808086bff9900000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000099ff6b0808080808080808bd4a185a390808080808089cee
% 3300000000000000000000000000000000000000000000000000000000000000000000000099ff6b
% 080808080808bd4a08087b4a0808080818cdee330000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000099ff6b080808086bff990000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000022eede180808080808080808bd4a084a4a0808080808086bff
% 880000000000000000000000000000000000000000000000000000000000000000000000000099ff
% 6b080808084ade9c085a4a1808080818cdee33000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000099ff6b08086bff99000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000033eecd1808080808080808bd4a084a4a08080808086bff99
% 00000000000000000000000000000000000000000000000000000000000000000000000000000099
% ff6b0808080808085aad8c6b080818cdee3300000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000099ff6b6bff9900000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000033eecd1808080808084ade9c084a4a080808086bff9900
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 99ff6b0808080808080808080818cdee330000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000099ffff990000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000033eecd1808080808080808187b8c1808086bff990000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0099ff6b080808080808080818cdee33000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000009999000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000033eecd1808080808080808080808086bff99000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000099ff6b08080808080818cdee3300000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000033eecd180808080808080808086bff9900000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000099ff6b0808080818cdee330000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000033eecd18080808080808086bff990000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000099ff6b080818cdee33000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000033eecd1808080808086bff99000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000099ff6b18cdee3300000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000033eecd180808086bff9900000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000099ffdeee330000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000033eecd18086bff990000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000099ee33000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 0000000000000000000000000000000000000000000000000033eecd7bff99000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000002200000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 000000000000000000000000000000000000000000000000000033eeff9900000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000033880000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000
%%EndImage
%%EndPreview
save countdictstack mark newpath /showpage {} def /setpagedevice /pop load def
%%EndProlog
%%Page 1 1
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -T
%+ 9.107579157948495cm,10.748666995167731cm tmpPSFile -o
%+ /tmp/latexdraw/latexdrawTmp149723853607683596/tmpPSFile.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.06.11:2335
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

% $Id: pstricks.pro 856 2013-12-09 10:34:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.21, 2013/11/28
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

% $Id: pst-algparser.pro 801 2013-07-09 18:10:41Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%Version: 003.002
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
FontDirectory/CMMI7 known{/CMMI7 findfont dup/UniqueID known{dup
/UniqueID get 5087382 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI7 def
/FontBBox {-1 -250 1171 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI7.) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 75 /K put
dup 77 /M put
dup 78 /N put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBBAAB71645535A2B
6F0F22458E1429F4A67307E01F0BCF6F337E0E2AD89658D880B04C26306F8179
C8121B958459B923AC3B05B594D8AB95F75870019130442FD29578D44F5690BC
7281357A5041C8A809A59D0DEE108E2A07D406656BC74A9F3317CB887E712318
46B2ECAA341F8692ACC2D14ABABDFBCAC6F35858355F1D3228B0223EC73AC56F
3C987464DB829F243E304F4C59CDE3EF6EB53A4EF9BA91510CB89A3407261F58
A2AE66880BA98FC1EF546112892494C85A2C39F9DCCAC5766725894A7AA148E9
42360AE64BF3A4F1F9F0A0D0C1AAFDC4D50C52233AA595B7D0CE557D4A010D86
6E6B76A7E9523E8A6633DA9348BC3F59302F72F492A30782AE7EF220516893D3
DE836CDE311DED9262AF01C506040541EE84AAC539B404B23033EF56D4BCE6BE
B05F79CD633FE75C6728114D2749E39FD7454050F67763AB636377BA8E1867C3
996C7D7D4A4A02BC49D1AD7FF174C1F49F1F205BC9D5AE42BCB02CF8554E8F5A
D1876C9285B6CCD7B8C165F75843B0AA11D8462B57077AFE75BAD086E9D9F91E
30ACFF91776132F3CACAD1CA5E08B17B36A0E45ACBAC52393B9AF9089BD821D9
CD5A9CD9BECA59F7445D63DECC1B4502D299DB85B6E2EE7C69A1DAB91E22A3A5
89B524FA20AF6005E7A586B90A2C6E5A93C9EFA4ABEF5F7E4C7B81363FE8D2B3
0AD637FA863DE787581ADD7CBE463F7866C40F4E280260ED0E9C8453E5C7E668
FFF058B9742DD3F131C264F8FA102CD0DA05F3114D13D34D422799181453FE23
2FC6EFB01BE420C930B879D671F3DFB036197874725220644A5A52DFB467BB75
8089E4F40CE9401777B9FE1D0AEE02E782A6EB2A185A454AE9394094CDFE7CFA
C03C23A78EAF242E4F811E4C83B59EF4DC5ACE4AD37B41616B46C263358710B2
6137314545CA6CE89119B42A3518EC85C68DC07D26839C68B1FF55C4A9CD518B
A1FB32F9C475BB6110839FCCB94156E7B3648F27245A00D2966FC4DDE3996BFA
F463A663CB6935B596B1582ED0ABBC648AAA8A86068BF0038001C753C8BAFA0D
2058041DFA720B528E2D4B16196DB1CF30C779D3F4800FE662D5B60B208341F2
A66EFCB8448C2FCD12DF0DD899911A8BD96C9B670054D328790E5D388518B146
8CE92E368EB1DB3CAAFCA4834CC9D9D9DCC80FB1F34F39DACDE643052C977A7E
A95C5FA8DFED9B4DCE769E4E46256D6DA8FB18FD7FA4E4CED5D486803538F3B4
6D3F5B3C03184F5C26C66DBB4C724918EBB6A89C4602E4EDDA81EEE2BD18B683
FDB459F2CE0A9CED23DC208EAA8BEDB304B00E093DEE926A7B32FDB2EC70DD85
94B9137856DDDABB402B2C76DBA87149051ADC6007018EBDD571BE1D092EBD95
76D4E063AD7D5F62E6C26EDB88D38678F2806A1F4900B0ABC4ED034A818119A4
E618F1A902315BC98F26775E59555A3DCEA1D0F8B20A9084920ECBE3F7F245AC
1182A40B518B194669D95DE968542BFF80FDC89669BC256C44CB66A2AB8CD7A9
E42C69956CCB6BDE8C09AD22EF3196939B3B84EB23A6E071A36D702909E019FF
058F27562441EB5CAE87A4407F67C4390810BE89BBE867D636468E73677B84C8
5A1228DD7DC8EADA221B1BAD5F43E832F20ADE7ADBFF170AB306F5B711816FD1
39B7882556E30F002977FB88D8B28826A75DE0D20354A2D41F2DA8578376F7DD
F27B0F59D4DDDF5790E11E3957491DC74EEB7625CA49FAD90FA47AD8E0BDE824
FF326A84846A47A21B70FA549BEE307F9C6970009F963B49A504F0115777826F
1D81203F655C242FFF15BA97E3BDDFBF435B10E74CE8543C98966223818839B3
6BF3BC63F882B0AD0FDACA8C56A570277952E1D83F18BEDF084D2AC004E2B09D
70DE1740D7D220E92B54D2FD0DDEAF1E08C41FD321A8D474982DD105B23166A7
AA9E0129DC88065B1E0F9382BEB4B4E1DAAE3EA5489BDCA921AD5A8175F2841F
9400478DFA99C5E5553F383882664D73FBDFA29BF32E52C28DCE80DAF4839434
022FA515679DBC13FE98968D2894DF5DD69C49BD23D00F5D858B69D1F220F968
F0700E13873579B3CFB658972098DC61F1DD580105BC27795DB4AF11A871CCD6
2E1B9AF7F0DAAD4CE315379A7B42CECB983DAC5A2B9426B4E5E0A7F7978504C1
DD7E30063AE3CBDFB24EA2BCCDC478AB82084FD30A4793F4707D9F8F9647B413
F8A5C5AC6D5EA0E35628CE1096A434FB8286F4617CB4D0AD30A4A0B255A5A356
25AA5A947FD3C4FA44B4AA80BAB44C48CC1E2C6D0A711365A37A58C3483D07ED
301A83D2650A2E8CBA9EE62FF5C2736EC82C1402959F64527F9B640619F112D9
8E0F4A8A3078C72ACF3F34AD855AA4008C96E30D9E8C414607C34E06E29AC5B9
2EE5DDB823E8C3EEE6A8DE228313D476A7F39B5DFBFBDEDDF7C45C1C88EE6D01
7FB4F7BB2CBBD5DF7F0CBD98DC287FA6940FBFE1B3B136613A3CF16634CA7B90
53D5FD5776515EFF5D37F8FCC62D8BEC8EE2216503D54D6F2032D3C2BF861E15
FD1B45B71576F15852EEA65DD372E911EF4CC18283CD2FF4196A3F1A9D81137F
F1820EC604D6C61AF318C6C5AB6DA1EDF305CADEF7CC0183B86D31310A09972C
A4BC37D110C77ECCA614D1A281EE1C2040B4A5ECB31A3FC61760F608E44332D1
D2C53C7891B505A3020E9E4915F3618588FCEC80B9ECC5E637D8D0F3C94B1F2A
C53FC46CAE0AFAA7E12266C212A73AAE60199752C042BD55A5DF1CD07FBDB830
C83E7832D8554AD9C9CAEEC7CED1DAEE622090897641CF2E5B34A353D83264D4
4687522DB290D3BA927BA315EA5D25B0D7B69350C6C180AB0C322B05E01F7C7D
F2F48651567F0C1B49AF3950E43C94D78F7B184BF2946B924BC4279AED28F3A0
17A7D8B235698A516D3FB5DF0B18A422B2410C385E7E9439C6D60917EB3299AD
E31471616251FA40C9FA098109BB31A54D9C03B2F12947E4E9252A0851B81C4D
F39E7FC44752504B589C3911571B1D3EC3BD1E1807F99CED1DB20270E483A805
CA2A016E7283550D1B1D35C226FAB63F983CED41A4D02A2F228FA9EF065027B3
CC69D6F2E278C0A2D238D3A37154B0D22281F62C61D9182A69657B027BBDED64
11E261E47620602F865221A534C5A32E2BF5B93A187911A146F2E96538B47DBB
7BFA7EF406FE940F4DAD17E6E4B80C4F031D71F65657C2F5C8233EEAC68DE8A7
E1FC3055C122C1795D0C71A0284F89A9BF04837F61C9E08DB42644A490C97D34
A5D3CEE475B8D578205005A0D68AF94AD27C0E855BB8EDB74775690A4EDD6543
BCC10CF13283D6FA8A7CF3FE6C4F96470A11FF0B0160D3F9816B13B0BAE0D8F9
B84C7631063FE658D13D108D6FE24A89799FABA72E6A6D1C943922CBE676C1B6
11A4106ECB4F1A7F8A84B2783C2E6A109C58D63FC0B74D8C8A1CB62D527441AE
E656D94B1AA8581B4F07B653ED6486AAE1F8ADB30FA8D8914AF24721C74B0908
D84F2EBB91144ED4BD7EF533F2584048DEE37E17CDE5FBC2992A6F924FEBAF07
B626F988599DECDAB43C931CFECF99FC6EBB72F8E542765C26295902DFF60B7C
7B9ADDB4858BC9D808B7F0909690CF8DFBC59A786D48B891937C31A219842A43
234425B4963062DB4C4E9F534C77F4243408805B5A6B8BBF428632CA4AC03A7A
E336DD181CE0CF3E742079E2919EAFABE16A63299771BF276EFA8D85C920F995
5B9D4E8F1ADFCC5C29AA89BF90C186C5DE7679906B2FD4DB279D245D27D08837
D3A8D541FE37415B706EC585C05804108C1D938E543B8B63E275EE85CE9DD843
0A8B9163144B77DA1A552A25D5E77E94F29CF252BE9950F4E627D5F72536B6F3
3278D4A45D10759F16AE42BAE8460865FEE84537F8EC9BF4813570E883B826FD
1ABF3F4E66DB6FEF8366E07BCF290EA67D39C9D81B2A7EA48E0A228FE3D5AA50
1A56CCBF229C9AF2537A8FA70EEF41096ACED34CC7BEECA4EA1F23B39FBC39D8
CCEA93E63F508CBE6722C11467A3D0D5C4C52031DE43C449333E4295104651CE
E13B821D7904653346067E971BE0042C571ABF40C3A1079A675FE4264B784D46
1B8FAA4CDE9851C4EBF69ADF51A7B68CC8706C08D13A44909D4C1D78DB0E0B2D
0E0318304B229DD2FDC968027CDFF65722059C62154304D6F9C3F06DE22914EE
928B7D1BF1FC7E74B4D882998D59BC086AA2D4EAD0AE39F6B75B5A3FB9994506
E21731E1A15F0F2D12F88724BA72898197A80FDAC00243A3038871EBD2F2BAB1
C616278BB78490CB86F552CBE5DD0862F3793D72C68AC16AF8E38FE1A523A5FA
9B0428745B1455671CFA1F6BFBCCF9CA23C833113C2948E7A6AEFFF1A83509FF
C559BB5EE7F92BB43F7F37A371E661C826F63DD0C1B25E34A8119E71EC82FB66
23C7B126FB6554E7560B1B69F2EDBB742F3B20D1648C151C37A8570CBD330A9E
7592A8607D2D727F3AAA0FF2057DF4E2A4C7D3B658C6CED38824A770420D89E7
F6AD385DBCE9C9A9095CF0042052A67AB804A6675BB9373A99390CBDFB715984
A069DE543E4C6ADD7F1EC7A15392EF834EAB4584679A43443953427DB13E6959
0F2F5061C99C6D00FA5327FDB5330AEDE19A53DE3AE092634DC6AEEAF63A5BED
990F8A117AEB1CA0E7F7DBE02CB3D86465F1613B976D1CF6F3A1E69740A2FDC8
062ACC45EDA6B863B60015F276860FB79C31D28F97A799568E66D0A8757B2C41
E939337B467303041D0F4C59390B2E41E5F298F275DCC699D27C459ED4D5ADBD
02539F00095D7E1872862142B46BE06513D3EB1A406E6BAA64BE795122100F09
C37E5D1834218EC1D11B031C7DFC9F5AB071A8F4DC08203821366959E9191D4B
289682D915AF28CE5858F83338DC51B6B0DD052A181D9133FBA50CF18F70EE65
C33726A0450EBA9D0E0C3662AF6C2121AB7911AA9880D6BB6811D6D7515888E7
199A0E632104059A88C9D85B19BB35EDF4AB95E1515BB2339572928BD5FE8CBD
2D4DAF55DCFE29FBC4C3D56336277BA0C9A889A129F9FA7052AD1420B8705163
1A808EC1284C888D78CEA2B4BAB71AD76289F5F4986008FA9BF328E8537E6C91
E11DBDD8447E1C9ACE18DB0EC3D5742C264C8EFA445C5D16C2930FB43669774F
A2CA52144D99EFA8FC427DB4128CD4C036A8C611B087335C780740FAA419D39B
5DD68EA89C95275F9254D947EB3683D0130255269B10C6CFF29EA0BE484C9949
96188FCB747618A8044E2E37DFFD2DB8ABB621B34DC024259340677095B6937A
78EDCF508AC91D4CEFD872AD73F50582DC8807143CEB9F109C84DC5DA30B64E2
E56DE973088A9D32583D6946DB4F3523902FB1781D993B89D5F56D79D5D98CC1
7FEE73FC3A7D1BCCE90179AE450829E228B4DEAD3B2B4C79A400CFF899AB26F9
048B0875EBC871AD23BA96F88CDA8B87FE5809A13889A6AC349ABB25E54ACAA9
C213C5DE2D01BCB9CC0D7BBD384D23AE12E289FF8FDF1F611F5E14D4B20B15A3
42D9B3B37A83A9CA39B5DB6C8316C51B70F211530A56CFE54D63E88169CF5233
D1A7B2388025B3EBD2BEE0716C3A2D589EBC7A42B3DA602AC4E2FD9C9052C922
711E44408DEEA1FE0C9FD50A39AD46D437F61F284A2EFD42EF158EDD71A1486D
4865D6B5E20E60F4F4FC3D646909FF1EE2D7573665E4CD8340A1B232CAC0202C
C35BA9BB3D2267C7E78518F6711633F888EBEF72DC750AC2CB362D528CFC8B2E
A1AE1C05456F50EED8CAA768DEF47FF85C4322F02D7F9D188C6F285C674EF589
251B0B913339FD701FDB281338D96704ED7ED908BC113B4275A24D058955890B
12CCDD5572D63688426B0E1E9A40D6AAECFA5555C1CF9DBEF8C04CE1E5A63F14
969D39B6DAE8A91F6AF4CD1E2DA89A4661DA34E272B6032C442C031F081F5DF5
858F4620885773D8A2B2F5EB6DDA74C1408DF279900450E4A3E80BA9A9B1295E
F24EDC3F6EFD81A741EF74B0202820516C4FB720687BDD915EB2396128C3B262
20E3075DA153D6FD36E1C05B855929DAA4DE694B6F15EF2145C63250B24B031A
4CF0AFDB225E91D99828B83BD90F1702D3906D45872587A3A116B138AD9627CE
E778A949C392202823C670FDBC56F1896FFFFBCF52C4B400F67BA36B5FCE44A5
F18EEB8ADFC088C99DFF8E0A593E81A5ACA2E3693005F723C7D3E0AE2BDD3805
8C6007A00542DEB2539709558A88B21003CE4B2C7817AF207ED576B25A41DEA0
FC55A459BEB00ADB01309B35920F04F84B7B64F95AA99EBCB843A06CED900D99
97BEFD7CCB9F4D85876F10160C8D63E2FDE82B7A8D945F37CC9933ABE0FD1D76
268296B1A5AB06B2E814691128771694224781171DC6266BCC290FCE1AB59416
85530368115BABD4F1DE45952918D1945D51EB713C283DAE8EDD559F437CD886
A4B1DA6120D685C284673A3EE489FC1AE4297A3623B339B7D886B6B4B8F9F4A3
7BF85E320A52FDC6323B51879B98A14C33C567BC069D9B44616514EE1BE36F90
EC5FA33E1B6B0A46945D876EF0085E74935DF2560A03321861A752E59742B9FC
5C501FBC64BFB1602459885B63873DC857ED37F8BE1A9C6E9517B9BF5A6161BD
DEB6DB0381FFB34A8A96AB4AD48BEC40D4C198ABC599C3758AFF638AA75BBDA4
8545D5F95FA426FB25587301A43E176F6CED7851E815AD907F2443E70740DD2D
4FBD5D978B9B37F59D6DCF0ADD0F90825DD23558FCB858513602C8BC82BFA383
7AA6DCEA4009961D06DF233C5381A7F9541259926446B2F03664BC5978A1B6CD
EA6EBC9FE6100A65959513EEE32E69D47B55BAF30A893D77142F943982019C01
715CE29923795EA01C58A798979939B507C5B29A32881877EF7EF0C5CB3DE591
6B9A6C3F3FFA847F396A396F078860B59850BA4CA3115CA2376AEE6B30C05DC1
6F9DB6781ED0F9D45D10E096C33B1B7CD12A9D57C6E49AD833C4B093DC82811F
16B3BD902BE764A1680831EC5A6C1CED84AE0DC0A65678EA5270BF20931E6409
7AA44EACB22CCA11098F8A51096BE83A1ABA56C9EED4195D5CCF24FDAD92E823
C439DAAFBFD652157D728F2754F28304710D3CB33763156D76A259D446647A11
493FAC70DD28063A4CDDA162F72542368E1AC2826C4BFF7109208F66371910C1
068F21779FC39DE03AECF1C9FB2F417930C22791961D801284DCC89B0833B6A8
D63F153ACBFB7B7D547924613BBCCAED37D90BAC5B0264ED31C7B9DA5A2BC620
9B20CA48424D0FF58905BCD6190BF4B5FC6ECCA1BCEF13426920197CAB41C4E6
E82E8EE7BCB23C6BA6F8B58001533B225ED721D6CE3D6E89116EC33CAA6E905A
649F8C6A1AA187A48E20DB864596481976216DB78F0F57543DFAE3CDC0A6FC77
2CAA49442527A5D94DC54BE93C875690CBE52EAA4EDD9F2A511361BC0F0807EE
96AD0D26B62D809E82EC14EDB158EF48A748A6FE0C3A7EE5D4479B35425F35AD
3EC7444F6FA75CEA5011AD571078293448A33C7647611CAEE87974B0A756DAC9
4E1BA78DEE477FA59AD50BF5C52E068A5E044A4A4994D5B24CC5045F768A3C51
D4F65E2A5AFD271A7666C6835E28C60751EE528C0742433165AFBE71562A3016
F59676D56B0B5F7E4984D664BC3ADDAF24B4205752EE21D4B57057A943018466
09C3FA5D2C5BCBFC22A643586BC9E7A965DC34C0A7D76A470B0602AE45106417
0701ACD2C764DDE218B924E38B5A13CB82678372E743A8B3CC300BCBBB878978
D9847F0640A031D5E76B5AD07699C3B2FC6C1DBBF79938BA649C152FFB2B5BBA
D18B9570670B99907506494F362B124790A17D4F415D8447ECF70B67DBD46643
91AD465A1852B804CBE65206EAAA38FFD2B4180AF00DBC62979F87BD3B70A8A2
C7C994B4FA24897D4F8CBC0D021D6F1B42B9BE470726AD1F8E04551231F475EB
9DEE98C52EDE061B07C8343C21E274982FC4882857EB5118F68DD2B01AA1DD3F
B25E113B9706D725DBF705E3242450FB2F682F55B9EAF047229FB0153DCC2063
C97EEE5857768FD85AAE1405CAC3D222D3C344FCF6D52EE42F40EF2C3C99E4A3
B8FD655FE43C109D58F77B8D82FEFD65CD0F5E7A4664291EB6092E8AB60967F1
AD6D4828E5D9996D171547F50451DB75B0D04B1CB1CFF3CAA6AE68B015F28B08
5E5335F3C4FC17EC8586896575C7974DD686961FF6B511F90122C04716CDB437
3C2B954DB2C4BF308F1385AEC5B4095E791243EB0707D9626EECAA6CDC6C80A0
63AD8A15F5953C13243005AC6B9796AD88BA74E37725A69F977497A4C7A3676B
40E7C6CA15944819C7493D34720B9AD2889D3D81F1D8198874995147ED630DE0
8B4528CE5EFE6FF5597EE322BC2747D5A55D5E6000D792AEA714DB12CE02FFDF
C5E6C1511FF1B246766D399D39103B472EF028D1C6E8D9DCFFC538EB5F9B876B
16DA60F732FECB641E59513EF6282E7EE51859F4A455482B9743E1D103904B31
F3D6EEBF2681AC9DC66247B10BFCB6CF5753B558872CF8C28C05B03D2C320E34
81995B5A1F420A18EAE4997C8A0E4711E2D76916FD16A9752C9CE30AEE9F1358
3D53EDF400B94E54BDA8BA2F17F74AB1846F5EEEF31AF92208B2764A2BA55618
38BB129D49070ACB0C7479109B879C4E637AA57324224786EAEE749768750AC2
FEF30E21317B07C562A63FA4A78F647049CFC0E727C08E2179F93608106A70C0
C738B8BD0177BB7CBBBE6AC7E1C347CCC2A8775137574AFE99C007C2E7936A91
7893B330CEBA71D90D2D5204E9C607E69EB515AA8478101FA0EFA8E639865560
AB77A8CDBC64103E24E21220EEB658FBDC327137CC4651E9121E24F01B360A88
5452CE0DAE18719771509DAB9F083F9A473113B8F6B22E376CA90066EB5A4652
DEB326316FDA61A0076446786FC2C27BD0B454977A232D01796A74CF6026139A
44A6B067ED6817341AB7F9D9F50D842BE4A0E67BBF743AF3B6C875AFB49196C2
E146A7DA5B8E4D037BAEED83420DC17D321D3CA64D0C823DA185C9CF8FE2C6BD
C7DB9BAE0E5CC0FEEB0260463DE2213D9DDDC62603973BD7E695F584BCCB17D3
66075C06CA288529F775A7D0EF6A7CE910F75BF25F6AC120C2270AFE6CECD9C1
0218A1FF852A1B3AAB642C203D3579D456D8E7B49E77C31F1784A11A165FB1BE
499997BCA3BB22EAD9476CDFDE3A44DD8730FCEF44D12C95DB1A001A6CBB095D
2E23DC6AF9522A1A5D4356EC4FD6BA2C19299859165DA7AFA597584017AE1C12
D726B441E98055EF9D9F7BE632EF7D2AE241E1EBA58C00FB9843902F6C32467D
AB1C7D2786B61EE0EF469A23EE999F7BCF4C9513738BF77B3069F891F0A344D5
BA88AFB602FA470DE2CDA5DDAE0ABF195DD5EA9AEDA2C24A1BD817BE089DFCB4
41591CBCBEC3C1B2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%Version: 003.002
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A1DC6C79583CCAAF195A23A61E58F0894BA9479FE3F672B955E989F0B5
3FB07AB5935C31AA8E4B23C25A1C789D19B4CEC74E2B21E32E45F6931C49EC99
612768EC387D9469C9C9E7751C9D0FA626D6E655E7F758F66F8ED69A5C0548E0
A37DDE7E53BA9AF68821E045DF9029D9B59DC56716FBC522DC14508A94D040FD
7FE048D1EADBA2CCDF9987485DDF7F35A33A9E6BEE81A9A3DAE9A3FBEF48ED20
3F64FADC68E6D7E2F3D59613F1D440425EDB33E29407B23A0621D340E95CB0D8
DC6B25B9BCD5EE57E8D40B40C0D620917E456A6E4B8C6779137936CB4A34EE86
18FF27515E7A4F6D08280A89743BEB790D51EA46B9B202FCB23EAC669E2FE091
59BDEB19DE4F8EB2F79D878762DD606E4FB5EB07DD64A406DF53283F69A22701
15D8C3AAF477C7217C9A24817DB72206CD2FF4F4E129C2537961C8103C819AE4
A6B62A5398DB4E24EAA6415C6BEC6F24120CC5E432226F7CC38731246CF99B94
103FA2ED32CB0C5D2034C6F8D5FC24D02C68F69FAE5472D2EE1132CD5F6A95AE
77536CFC740671700E04C657ABB74FC624AE34E748ABF09D1D30ED0B70BCCA74
BB23964FDDFF3D5C5D02C540CA15EF2ED206DEBD17CB6F7DBD8A32866F7CFAE8
0604EA2E353718D6C7C851E245D45713B728A2B219D059D6ABA285459FE3801A
8C8EB11C4114060FAD04BD1D13B795677B369C4D9A218FF1D761BBEC3A7E13EC
3E51788EAFE60AA824CC2908E65CAD07C590829B9CB8A6A7FC32051848BDF5C2
B878F6FE9605083DAFBE879113D97FEBE4E425F1C984B961318711CABA1F9D23
700C1F5B742BBC00C8D432019E68C1B9C338517D149B91B616905B678EE34716
42EB08B0CD5DFC3387645E8F77DD9875F7854E3FF72CAE1419E5CB39B601FAF8
33F1277A4AB86E4EBBABE65BBB7DA306E7BCE59521A44874C861B642898AA254
18CA426DB4BC12DEABA9A0BD5C9E8EC8F637B727E18BCC8777B72B2630315CBA
AD4BBDEBDE915C8A8AF4E217E85D5C0E2AC85445AC7A69A537AEF17FEF6DE340
BCF1A86E0E9BE377E09343D76F6F3315E7DD02324CC352E7D791BEA86DCFB96A
B7F9D114A77C4F41EBC46623DAAB34FFDF8E634009DF96685A5ED9B5DACAABEA
8C7E8186622198452670AACF2C8FCD936FB620778E03A11DB4C556BFB20CE24E
D96E7E265408257C15C92D4331AF725AFDF9B533972B5B218665B1BBC2B5071B
8C6CB2C47C7CDDCF1D26EFE183DAE5C41355322D7DE3172F6E33E020FD2E791D
84FC0EA252777400801CB24BE3151F7D1708535EBA9968DDBF33587BD9EC98FD
F28D0AF7EEF2ADF2ADC04A4B27C2B6224C0A1F03E42A7C66BC5169006776AC44
30C2CE173796126AB1184E4F4D3BB29DB41EC6B8DA90B63DE79D672B849A9573
F3EB3B2D154A2980B1370B9BD266648665D973B2FC74035D6C8E3D2F3ECAF271
B52B5520B7CE022AC623305D4D1DB2E3B611C8D50A903BB0AE152EED2B460C02
BA1652E533B10A8B40A28076E2E8A5F8CF74C13564C222FFD1149DC3B7A8DCC6
D5781255B65650B17794F6920CE29034326B5D7A4FA9A53BC8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%Version: 003.002
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 108 /l put
dup 117 /u put
dup 120 /x put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158221C9FEA509CBAFE1431C515231AE39444275706266E620FB3A3D37B6CD
E9E623A8E16A190B633B9866031EEB2065594865E9453E9B6E726DF0D128A1CF
FAB24939D4C9105BD8F3C596C6F28C2EE080492DF32CFECD4A17063BEC1E0F38
D162FC5890998A99BFE2406581D64F49F46B2A32DD7712142611205589FACBDC
E80194516FF372927F790E4981671AF03BB593307B759B93432F1A710625681D
EB0AA4FD4B57CAF14B34FCA46ABD97B5AEA02A3BE1064F8FA6BD5C2B6D5B95D1
6AA4BAE01BBBF1C500EA0219710517916D0CF980211650F7FD1D657C31646107
E069320688672BCCCD7EA068860F1C5275ECDEEE043F33FD3778024A3CBA9DC4
90FD77F0F3AA902CB0F8CB85EB85B1FE1D7C558D596C7D0097FA31399EBAA5C8
FAFE0A12E4E8DFE8EB63679D37BF5429C65BFCFE3D52148AD0F1C8B8B3873F10
DD19B813E15DA7A5FF834DFA815E1F3765392D2DB2F4AB03FD01A262D7CE8031
E1273A9000C8139BAF088951C2DCEF712628470CFCF25D070AE2A8E0DA160396
9F8D10469A0E6D2DB1134E3301899D29B4E4CB9CD27D88F87E5E1933901B021C
755A31414883C29C68C3260535835CAC3AECC4A22BF194362C862C904C6646E4
50C3BDAECB405F539B3EB6425D06959A7011DAAED3FA80BF1307728A986B66DD
C9D43486DF7BBC05B79A1E96F4F6F7377EB35E06463312D48584EA1598B47E90
268D17318A8ED60E3AF7B679228139BF6DA9A74948C3504D18FE1F5EDCA106FA
0636B029F12E6809CD8308A1512C207170DA5BB2AAB0A433C40BBADDCF27BE28
41C8B99F96CA4FABA813FDA935FA86C092E2DF9B35F469ABC7B0075FAA6FE3D2
1E5C1928F4167F45530C20E87E1FA48AD0D72F5E8A10EE7679FBD1612A97ECE6
36E612327F081595235F72C7CC477CD7942D236E72EE45718D7AEF0E05AFCE59
9847B993C18E41D0CDEF40303155D9FF7B893CC31F7949ADAFA7FD22C8F9537D
E6D20489EB3F2DD2E97E97BEB6C5A1E7B2B36E46818E7BAF0A9F966EB9261170
ED04F7433A928756FC9BE2A220C76AD0424D6077D5C415AEFEE988A756A598AB
148150989F4B398FD87BC27EF47166DFB2C258B6D7772287FAC65EB8AFA03089
FB64A4276E5D5B346A7AA6C4C763218915AA9952E0ECB9642368AE093CF80DCE
0CBFBD33673C5BA58E2B021580D63C76BF19639368A8E8C28005291E4D768BAC
7378E124713CA18F3333D6D7E9C8821D945DAED7FB5E33FD5121D3770B48B853
0F1F6510D8F19ACD02E04943BA7EC7F18E90B0C05CA837CF2D70FE8977957788
C0472218A35BCD872F71C6FDF28FA577B39003387F79289C663EDF22052794AD
E159725480EAB33FDF27CC3291F8C096084026704D541B1DBC252F782DFC48D7
726661BDF8AB096F3174D8876188AEE1C0B9BB4BE6F66BCEF2C09E112A333C20
3C1D6F6884A5D19AE93D67F52670BB3F41BA8BB6EC98CAAFB7993BA7CC897B16
A52472748DD464618B27E009330ABB76248AF385677FB2E15F1D61C7FE8CC4F1
A4DC3169C25CF63F91D69A3C1C428F1FEBD5201AFE350331379CBFE17C14503D
C1AF1FFF344B7DACEACF1625BDF902DBC4062BE896D00A355A19EE668E1A6ABE
EB389E2DF0DF373FE5AD1F7D9D6AE7592ECC45C985F9C4EE95BC32C9C95EBFF0
E7C2CE961EDB284079E0C1BBE42D4E32397B42D6F3E389C51E50F71CA58B21B1
6CDDFEBDB0D3E5C308E5FB883C037A9B5160029C2C808865F2E4A0183C3F1235
8E6644250274738CB7DB4E9A14291AF15CE3BBD6B3B90E54CA52DB45A2E8BB82
4F2E0310C59E864A74877AB527DC57226948863D5402710A02CC77A984188018
1CC1CE35BD3065066563083DE066F1E9B3F312F1EEA3F9496A3CE03FF9EE1C42
93A042586C7D5DF306BD03A21F9B9B7DF58324AE6E3B639DDE323A6EEAFEA964
B113B49B8BB78F81FE42DB1827F994E9EFF86E090C54BA0525A583A918D339C1
DFB90CED5EB0FC05B94A228ED59B3BE653A80FE9B5F613D694EE004270B5FFF3
1CE657FA9EECBF40F78F9F90BE865F80AF8E942C0D265D5D945DD0197A2B910B
C0793E55132B9C12CB0AC4A7C97A82344F676958CBE764ECABE84ABED150C71D
FE4F0FE7CF85FFA8B3E42F7CBEC366E60C1841680A5951F5F4605A66D92A94E8
751E9404BA9BE83220BF5B57E3D3D80C06EFA0CB7B6606ED644BCDB9A47AE2E9
757F438418A09605DCA1C039D918A075AC7F09A6A6F06BD839C1571FF4FC6FE4
E23313A4C1BDB007D3A2292DA43389FCC2756007C24E80ED45A723F71781BE35
78D31F637CF4A544F0D25DEF0CF089AC57608560D837FB67D3FB447146EE9E1B
B712F5F9D29F6B6E5C25DB435F55A2FCFA0F8F17FEF24ACA7577F78DE75DB76F
7DBFCD7370C94E4625069E1A59E605544030A00208BEFD228AF95A0020FAB757
002CDC7DC857E47F1B8BE51B2DC2907CE3EA6D7140691D30D6B136DFE42B1456
975172439BBBCD1261F9B7EC08ABEE0FA48BFB7C6AF4626501B31514C9B630EF
F728D8762D67E8B8BABAE72B913FB39BA54065324204C8AE7A069A3F823B22CB
B7DAA6F0E6E845D57FE981EA4F2755FA4096FC8DEE8136741D533CF74C7C434B
279AD8BFDAE064992A9F5C266CC2CA1AEA4FFC0C6BC0C6746C359585C6038A2C
EFCC4D905D2F0BB2556CFBA1B33D3B49F85DDC51AFDE749C80DDE6B7D3834A93
9D292815DC8AFB953EE33F765A3A96162A827FB2EA9D73966572871C6B21E99F
656F621C7170CE2E6DF296633202D1391D3AF02CD560148190E3E7EE2E378619
8CE911C830DA62809AEA3471561B823F67FC3782DE7AF04970FF768B568027F6
14651E13C1E94E89FB54DD60C57DD002C49522AB8AD37C136628D7DBF0E10461
05F450891CA70EFA86944BFF68F4CC8595582FB79A365AA080FC088FA36EB101
03F1F4CADA056F6E50024F24C6B9A5CB2ED1C248CECF1165584D8BEA49E0741C
65D5647427AD69A6E5F6FCCD1866DFEE6E374338C9A34C0B793736CA6DB7C353
6EDF375FB39377FBF8F54DE35725035B2DA64FA2576912E52EFB358B9C83E9AA
6E8DF910E940266C15AF6A3B6CE0F4A6942057953B278C2DB2D07830FB214448
76B1AB0EF1D3A50283B3FE65993E31CD1A9707A71B91B69F6FA02DEF1B674256
C04DF77738F87BAF1E5C5ADDB520FC8C4C90CFF7899727F2DE00C067B10D7D47
2B06C2CBB2CB91B4FDBE99CA221941EB791BE9ABF4D97F89DBA56FB9D1578F8B
8933A34AE8B13CF37F67BA019CEE42C2605D3599A648C3256ECCE34C848D17A3
CC0E687116C74E188E4EDEC55CD42AA3610ADC804A5ECEB7E9E5F713F64B8003
AEDA672125919B835102D89284919B4C3B2658E7E941C3A447B9C032637CB959
26DF1E5058A3B5FCA40C1B5A4192ADA3A78E31A02B42EECF0C02A99E96437EA0
4C76962040C548B523B3A756843BD81308925DD50720A248E0DECB385F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
TeXDict begin 16982666 20042793 1000 600 600 (tmpPSFile)
@start /Fa 177[53 63 1[56 75[{}3 58.1154 /CMMI7 rf /Fb
202[33 33 33 33 33 33 48[{}6 58.1154 /CMR7 rf /Fc 133[42
1[50 2[53 8[27 108[{}4 83.022 /CMBX10 rf end
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
TeXDict begin 1 0 bop 0 TeXcolorgray Black -720 -576
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -720
-576 a 0 TeXcolorgray -595 670 a
tx@Dict begin  gsave STV CP T /ps@rot -89.85001 def grestore  end
 -595 670 a -595 670
a
tx@Dict begin { 155.76201 299.78275 } PutCoor PutBegin  end
 -595 670 a -595 670 a
tx@Dict begin ps@rot  RotBegin  end
 -595 670 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   /Lineto /lineto load def 0  setlinejoin false
pop .5 25.04419 25.04419 0. 228.16507 59.28421 Triangle  gsave 1 0.25882
0.25882  setrgbcolor  1. .setopacityalpha  fill  grestore gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial -595 670 a
tx@Dict begin RotEnd  end
 -595 670 a -595 670 a
tx@Dict begin  PutEnd  end
 -595 670
a -595 670 a
tx@Dict begin  gsave STV CP T /ps@rot -78.5 def grestore  end
 -595 670 a -595 670 a
tx@Dict begin { 72.80942 170.11646 } PutCoor PutBegin  end
 -595 670 a -595 670
a
tx@Dict begin ps@rot  RotBegin  end
 -595 670 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   /Lineto /lineto load def 0  setlinejoin false
pop .5 25.04419 25.04419 0. 140.51059 27.97908 Triangle  gsave 1 0.25882
0.25882  setrgbcolor  1. .setopacityalpha  fill  grestore gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -595
670 a
tx@Dict begin RotEnd  end
 -595 670 a -595 670 a
tx@Dict begin  PutEnd  end
 -595 670 a -595 670 a
tx@Dict begin  gsave STV CP T /ps@rot -108.2 def grestore  end
 -595
670 a -595 670 a
tx@Dict begin { -16.39801 66.62793 } PutCoor PutBegin  end
 -595 670 a -595 670 a
tx@Dict begin ps@rot  RotBegin  end
 -595 670 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   /Lineto /lineto load def 0  setlinejoin false
pop .5 25.04419 25.04419 0. 15.91653 26.72697 Triangle  gsave 1 0.25882
0.25882  setrgbcolor  1. .setopacityalpha  fill  grestore gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -595 670 a
tx@Dict begin RotEnd  end
 -595 670 a -595 670
a
tx@Dict begin  PutEnd  end
 -595 670 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   34.0733 -62.17958 12.52188 .5 CLW mul sub
0 360 arc closepath  gsave 0.2 0.6 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   65.37843 -78.4582 12.52188 .5 CLW mul sub
0 360 arc closepath  gsave 0.2 0.6 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   96.68358 -60.92749 12.52188 .5 CLW mul sub
0 360 arc closepath  gsave 0.2 0.6 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   132.99756 -73.44937 12.52188 .5 CLW mul sub
0 360 arc closepath  gsave 0.2 0.6 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   159.29385 -56.5447 12.52188 .5 CLW mul sub
0 360 arc closepath  gsave 0.2 0.6 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -595 670 a
tx@Dict begin  gsave STV CP T /ps@rot -89.85001 def grestore  end
 -595 670 a -595 670
a
tx@Dict begin { 49.71762 105.80603 } PutCoor PutBegin  end
 -595 670 a -595 670 a
tx@Dict begin ps@rot  RotBegin  end
 -595 670 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   /Lineto /lineto load def 0  setlinejoin false
pop .5 25.04419 25.04419 0. 77.90031 15.4572 Triangle  gsave 1 0.25882
0.25882  setrgbcolor  1. .setopacityalpha  fill  grestore gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial -595 670 a
tx@Dict begin RotEnd  end
 -595 670 a -595 670 a
tx@Dict begin  PutEnd  end
 -595 670
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   34.0733 103.11166 12.52188 .5 CLW mul sub
0 360 arc closepath  gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   121.72777 110.62471 12.52188 .5 CLW mul sub
0 360 arc closepath  gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   /Lineto /lineto load def 0  setlinejoin false
pop .5 12.52188 12.52188 0. 27.81236 -137.31131 Diamond  gsave 1 1
0.2  setrgbcolor  1. .setopacityalpha  fill  grestore gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   /Lineto /lineto load def 0  setlinejoin false
pop .5 12.52188 12.52188 0. 87.918 -134.80754 Diamond  gsave 1 1 0.2
 setrgbcolor  1. .setopacityalpha  fill  grestore gsave 1.13791 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   /Lineto /lineto load def 0  setlinejoin false
pop .5 12.52188 12.52188 0. 178.0771 -128.5466 Diamond  gsave 1 1 0.2
 setrgbcolor  1. .setopacityalpha  fill  grestore gsave 1.13791 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   226.28691 137.54706 12.52188 .5 CLW mul sub
0 360 arc closepath  gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   234.42644 -40.89214 12.52188 .5 CLW mul sub
0 360 arc closepath  gsave 0.2 0.6 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   /Lineto /lineto load def 0  setlinejoin false
pop .5 12.52188 12.52188 0. 240.68738 -116.02472 Diamond  gsave 1 1
0.2  setrgbcolor  1. .setopacityalpha  fill  grestore gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 65.37843 26.72697 27.18631 36.1186    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 65.37843 40.50139 42.3001 94.70296    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 127.98871 37.99675 89.79659 28.60512   
/Lineto /lineto load def 0  setlinejoin false Line  gsave 1.13791 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 138.0064 46.76233 127.45036 100.9639   
/Lineto /lineto load def 0  setlinejoin false Line  gsave 1.13791 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 31.48183 -51.55844 13.58685 32.71873   
/Lineto /lineto load def 0  setlinejoin false Line  gsave 1.13791 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 33.64435 -74.10712 27.96866 -125.47366 
  /Lineto /lineto load def 0  setlinejoin false Line  gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 93.75043 -71.60248 88.07472 -122.96945 
  /Lineto /lineto load def 0  setlinejoin false Line  gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 133.41782 -84.55678 94.00397 -128.45369
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 67.97685 -90.21642 83.7918 -126.89464  
 /Lineto /lineto load def 0  setlinejoin false Line  gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 91.04869 -49.6577 66.00449 15.4572    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 62.87424 -67.4246 66.09436 17.28108    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 155.53798 -44.02194 141.99454 34.64725 
  /Lineto /lineto load def 0  setlinejoin false Line  gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 129.56644 -62.64587 142.1773 34.97678  
 /Lineto /lineto load def 0  setlinejoin false Line  gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 162.51831 -67.0508 178.33325 -116.25092
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 216.12509 82.93867 227.15001 126.22084 
  /Lineto /lineto load def 0  setlinejoin false Line  gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 233.2894 -29.23248 228.16507 65.54515  
 /Lineto /lineto load def 0  setlinejoin false Line  gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 237.7321 -52.08679 240.8567 -103.67172 
  /Lineto /lineto load def 0  setlinejoin false Line  gsave 1.13791
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -595 670 a
tx@Dict begin { 29.06445 -137.31218 } PutCoor PutBegin  end
 -595
670 a -627 692 a Fc(l)-600 704 y Fb(1)-595 670 y
tx@Dict begin  PutEnd  end
 -595
670 a -595 670 a
tx@Dict begin { 88.54405 -135.4336 } PutCoor PutBegin  end
 -595 670 a -627 692 a Fc(l)-600 704
y Fb(2)-595 670 y
tx@Dict begin  PutEnd  end
 -595 670 a -595 670 a
tx@Dict begin { 178.0771 -128.5466 } PutCoor PutBegin  end
 -595 670 a -627
692 a Fc(l)-600 704 y Fb(3)-595 670 y
tx@Dict begin  PutEnd  end
 -595 670 a -595
670 a
tx@Dict begin { 240.68738 -116.02472 } PutCoor PutBegin  end
 -595 670 a -640 692 a Fc(l)-614 704 y Fa(K)-595
670 y
tx@Dict begin  PutEnd  end
 -595 670 a -595 670 a
tx@Dict begin { 34.0733 -62.17958 } PutCoor PutBegin  end
 -595 670 a -635 682 a Fc(z)-592
694 y Fb(1)-595 670 y
tx@Dict begin  PutEnd  end
 -595 670 a -595 670 a
tx@Dict begin { 65.37843 -78.4582 } PutCoor PutBegin  end
 -595 670
a -635 682 a Fc(z)-592 694 y Fb(2)-595 670 y
tx@Dict begin  PutEnd  end
 -595 670
a -595 670 a
tx@Dict begin { 96.68358 -60.92749 } PutCoor PutBegin  end
 -595 670 a -635 682 a Fc(z)-592 694 y Fb(3)-595
670 y
tx@Dict begin  PutEnd  end
 -595 670 a -595 670 a
tx@Dict begin { 132.99756 -73.44937 } PutCoor PutBegin  end
 -595 670 a -635 682 a Fc(z)-592
694 y Fb(4)-595 670 y
tx@Dict begin  PutEnd  end
 -595 670 a -595 670 a
tx@Dict begin { 159.9199 -55.91864 } PutCoor PutBegin  end
 -595 670
a -635 682 a Fc(z)-592 694 y Fb(5)-595 670 y
tx@Dict begin  PutEnd  end
 -595 670
a -595 670 a
tx@Dict begin { 234.42644 -40.89214 } PutCoor PutBegin  end
 -595 670 a -653 682 a Fc(z)-611 694 y Fa(M)-595
670 y
tx@Dict begin  PutEnd  end
 -595 670 a -595 670 a
tx@Dict begin  gsave STV CP T /ps@rot -18.2 def grestore  end
 -595 670 a -595 670 a
tx@Dict begin { -11.97919 6.21535 } PutCoor PutBegin  end
 -595
670 a -595 670 a
tx@Dict begin ps@rot  RotBegin  end
 -595 670 a -595 670 a
tx@Dict begin { 13.4119 40.50139 } PutCoor PutBegin  end
 -595 670 a -639
682 a Fc(x)-588 694 y Fb(0)-595 670 y
tx@Dict begin  PutEnd  end
 -595 670 a -595
670 a
tx@Dict begin RotEnd  end
 -595 670 a -595 670 a
tx@Dict begin  PutEnd  end
 -595 670 a -595 670 a
tx@Dict begin { 75.39612 27.97908 } PutCoor PutBegin  end
 -595
670 a -639 682 a Fc(x)-588 694 y Fb(1)-595 670 y
tx@Dict begin  PutEnd  end
 -595
670 a -595 670 a
tx@Dict begin  gsave STV CP T /ps@rot 11.5 def grestore  end
 -595 670 a -595 670 a
tx@Dict begin { 10.84517 -26.70093 } PutCoor PutBegin  end
 -595 670 a -595
670 a
tx@Dict begin ps@rot  RotBegin  end
 -595 670 a -595 670 a
tx@Dict begin { 138.0064 40.50139 } PutCoor PutBegin  end
 -595 670 a -639 682 a Fc(x)-588
694 y Fb(2)-595 670 y
tx@Dict begin  PutEnd  end
 -595 670 a -595 670 a
tx@Dict begin RotEnd  end
 -595 670
a -595 670 a
tx@Dict begin  PutEnd  end
 -595 670 a -595 670 a
tx@Dict begin { 225.66086 71.80653 } PutCoor PutBegin  end
 -595 670 a -652 682
a Fc(x)-601 694 y Fa(N)-595 670 y
tx@Dict begin  PutEnd  end
 -595 670 a -595 670
a
tx@Dict begin { 35.3254 103.11166 } PutCoor PutBegin  end
 -595 670 a -640 682 a Fc(u)-587 694 y Fb(1)-595 670
y
tx@Dict begin  PutEnd  end
 -595 670 a -595 670 a
tx@Dict begin { 121.72777 109.99866 } PutCoor PutBegin  end
 -595 670 a -640 682 a Fc(u)-587
694 y Fb(2)-595 670 y
tx@Dict begin  PutEnd  end
 -595 670 a -595 670 a
tx@Dict begin { 226.28691 137.54706 } PutCoor PutBegin  end
 -595 670
a -653 682 a Fc(u)-600 694 y Fa(N)-595 670 y
tx@Dict begin  PutEnd  end
 -595 670
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow  EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale true 0.0 1.4 1.50565 2.0 
 1. .setopacityalpha  Arrow  EndArrow  } def  1.13791 SLW 0  setgray
 /ArrowA { BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0   1.
.setopacityalpha  Arrow  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale true 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  [ 152.91396 43.46623 215.73784 65.7644    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   3.01129 -2 -1 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
215.9814 134.5857 134.75761 114.27985    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  3.01129 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
221.86244 -45.49243 221.86244 -45.49243 173.90488 -56.22083    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   3.01129 0 0 add  DotLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
229.51877 -115.8554 229.51877 -115.8554 188.90709 -129.39276    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   3.01129 0 0 add  DotLine  grestore end
 
@endspecial 0 TeXcolorgray
0 TeXcolorgray eop end
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end

userdict /end-hook known{end-hook}if
%%Trailer
cleartomark countdictstack exch sub { end } repeat restore
%%EOF
